<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[web安全入门]]></title>
      <url>%2F2017%2F06%2F21%2Fweb%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[最近项目涉及到安全方面，自己特意了解了一下，记录在此，共同学习。 常见的web安全有以下几个方面 同源策略（Same Origin Policy） 跨站脚本攻击XSS（Cross Site Scripting） 跨站请求伪造CSRF（Cross-site Request Forgery） 点击劫持（Click Jacking） SQL注入（SQL Injection） 同源策略含义所谓同源策略，指的是浏览器对不同源的脚本或者文本的访问方式进行的限制。比如源a的js不能读取或设置引入的源b的元素属性。 所谓”同源”指的是”三个相同” 协议相同 域名相同 端口相同 举例来说，http://www.example.com/dir/page.html 这个网址，协议是 http:// ，域名是 www.example.com ，端口是 80（默认端口可以省略）。它的同源情况如下1234http://www.example.com/dir2/other.html：同源http://example.com/dir/other.html：不同源（域名不同）http://v2.www.example.com/dir/other.html：不同源（域名不同）http://www.example.com:81/dir/other.html：不同源（端口不同） 目的同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。 设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，Cookie 包含的信息（比如存款总额）就会泄漏。而Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。 由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。 限制随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制 Cookie、LocalStorage 和 IndexDB 无法读取 DOM 无法获得 AJAX 请求不能发送 Ajax应用我们可以在本地模拟非同源的ajax请求。 先写一个简单的web应用作为服务方，提供一个登陆服务接口，部署运行在tomcat上，此tomcat端口为8080。 再写一个小工程，只有一个简单的登陆页面。部署在另一个tomcat上，此tomcat端口设定为8081。 如此一来，两个工程就不是同源了，因为端口不同。我们在登陆页面发送ajax请求，出现错误：1XMLHttpRequest cannot load http://192.168.2.82:8080/Demo/user/login. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:8081&apos; is therefore not allowed access. The response had HTTP status code 403. 要解决这个问题，可以在服务器方设定1response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); 服务方就可以允许其他域名访问。 要设定允许某个域名或某几个域名如下123response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://localhost:8081&quot;);response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://localhost:8081,http://localhost:8082&quot;); 在spring mvc中，有一个注解@CrossOrigin，在需要提供跨域访问的方法上添加即可1@CrossOrigin(origins = &#123;&quot;http://localhost:8081&quot;, &quot;http://192.168.2.99:8080&quot;&#125;) 这样就可以成功跨域登陆了。 实际应用中，也可以让ajax访问同源服务接口，再由此服务去访问其他服务。 跨站脚本攻击简介跨站脚本攻击(Cross Site Scripting),为了不和层叠样式表（Cascading Style Sheets,CSS）缩写混淆，所以在安全领域叫做XSS。 XSS攻击，是指黑客通过”HTML注入”篡改了网页，插入了恶意的脚本，在用户浏览网页时，代码执行，从而实现用户浏览器。对受害用户可能采取Cookie资料窃取、会话劫持、钓鱼欺骗等各种攻击。 XSS有如下几种类型 反射型XSS 反射型XSS只是简单地把用户输入的数据”反射”给浏览器。也就是说，黑客需要诱使用户点击一个恶意链接，才能攻击成功。反射型XSS也叫非持久型XSS。 比如 1&lt;div&gt;$&#123;message&#125;&lt;/div&gt; 正常情况用户提交信息 1http://xxx.com/test.html?param=hello 那么浏览器正常输出”hello”信息 但是如果用户输入了一段HTML代码 1http://xxx.com/test.html?param=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt; 那么页面弹框，显示”XSS” 存储型XSS 存储型XSS会把用户输入的数据”存储”在服务器。这种XSS具有很强的稳定性。 比较常见的场景是，黑客写了一遍包含有恶意JavaScript的博客文章，文章发表后，所有访问该博客文章的用户，都会在他们的浏览器中执行这段恶意的JavaScript代码。黑客把恶意脚本保存到服务器端，所以这种XSS攻击就叫做”存储型XSS”。 DOM Based XSS 通过修改页面的DOM节点形成的XSS称之为DOM Based XSS。实际上，这种类型的XSS并非按照”数据是否保存在服务器端”来划分，DOM Based XSS从效果上来说也是反射型XSS。 假设xss.html页面代码如下 1234567891011121314151617181920&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;xss&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;t&quot;&gt;&lt;/div&gt; &lt;input type=&quot;text&quot; id=&quot;text&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;button&quot; id=&quot;s&quot; value=&quot;write&quot; onclick=&quot;test()&quot; /&gt; &lt;/body&gt; &lt;script&gt; function test()&#123; var str = document.getElementById(&quot;text&quot;).value; document.getElementById(&quot;t&quot;).innerHTML = &quot;&lt;a href=&apos;&quot; + str + &quot;&apos;&gt;testLink&lt;/a&gt;&quot;; &#125; &lt;/script&gt;&lt;/html&gt; 文本框输入内容并点击write按钮后，会在当前页面插入一个超链接，其地址为输入的内容。 假设用户输入为 1&apos; onclick=alert(/xss/) // 那么页面代码变为 1&lt;a href&apos;&apos; onclick=alert(/xss/)//&apos;&gt;testLink&lt;/a&gt; 首先用第一个单引号闭合掉href的第一个单引号，然后插入一个onclick事件，最后在用//注释掉第二个单引号。 点击链接，脚本执行 防御XSS攻击成功的根本原因是将输入的数据当成了代码来执行，从而违背了原来的语义。所以要在输入的时候要严格过滤，输出的时候也要进行检查。 输入检查常见的XSS攻击，SQL注入，都要求攻击者构造一些特殊字符，这些特殊字符是正常用户不会用到的，所以输入检查很有必要。 只接受指定长度范围和期望格式的的内容提交，阻止或者忽略除此外的其他任何数据。比如：用户名只能是字母加数字，手机不长于16位，且大陆手机必须以13x，15x开头，否则非法。过滤一些些常见的敏感字符，例如：1&lt; &gt; ‘ “ &amp; # \ javascript expression &quot;onclick=&quot; &quot;onfocus&quot; 过滤或移除特殊的Html标签， 例如:1&lt;script&gt;, &lt;iframe&gt; , &amp;lt; for &lt;, &amp;gt; for &gt;, &amp;quot for 过滤JavaScript 事件的标签，例如 “onclick=”, “onfocus” 等等。 输出检查一般来说，除了富文本的输出外，在变量输出到HTML页面时，可以使用编码(HtmlEncode)或转义的方式来防御XSS攻击。 DOM型的防御把变量输出到页面时要做好相关的编码转义工作，如要输出到 &lt;script&gt;中，可以进行JS编码；要输出到HTML内容或属性，则进行HTML编码处理。根据不同的语境采用不同的编码处理方式。 HttpOnly将重要的cookie标记为http only, 这样的话当浏览器向Web服务器发起请求的时就会带上cookie字段，但是在脚本中却不能访问这个cookie，这样就避免了XSS攻击利用JavaScript的document.cookie获取cookie： 跨站请求伪造原理CSRF原理比较简单，如图 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A; 在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A; 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B; 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A; 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 假设用户在A网站可以删除自己的文章，其请求地址类似http://xxx.com/del.do?id=101。并且已经登录。 攻击者先构造一个自己的网页csrf.html，其内容为1&lt;img src=&quot;http://xxx.com/del.do?id=102&quot;&gt; 攻击者诱使目标用户C访问该页面，之后再回去查看自己的文章，发现id为102的文章被删除了。 原来在刚才访问csfr.html时，图片标签发送了一次请求，导致该文章被删除。 防御验证码因为csrf攻击是在用户不知情的情况下发起请求。验证码则强制用户与应用交互。 但是出于用户体验考虑，网站不能给所有操作都加验证码。所以验证码只能作为一种辅助手段。 Referer Check根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求必须来自于同一个网站。 在互联网中，Referer Check的常见用法是防止图片盗链。同理也可以检查请求是否来自合法的源。 某银行的转账是通过用户访问 http://bank.test/test?page=10&amp;userID=101&amp;money=10000 页面完成，用户必须先登录bank.test，然后通过点击页面上的按钮来触发转账事件。当用户提交请求时，该转账请求的Referer值就会是转账按钮所在页面的URL(本例中，通常是以bank.test域名开头的地址)。而如果攻击者要对银行网站实施CSRF攻击，他只能在自己的网站构造请求，当用户通过攻击者的网站发送请求到银行时，该请求的Referer是指向攻击者的网站，则银行网站拒绝该请求。 添加TokenCSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于Cookie中，因此攻击者可以在不知道这些验证信息的情况下直接利用用户自己的Cookie来通过安全验证。 由此可知，抵御CSRF攻击的关键在于：在请求中放入攻击者所不能伪造的信息，并且该信息不存在于Cookie之中。鉴于此，系统开发者可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token或者token内容不正确，则认为可能是CSRF攻击而拒绝该请求。 点击劫持点击劫持，这个术语是Robert Hansen 和 Jeremiah Grossman这2位安全研究专家给出的；其实在2008年9月，Adobe公司就发表了一份公开演讲，关于点击劫持问题的，因为其Flash产品的缺陷可以被严重的恶意利用。 点击劫持/UI重定向，是指恶意网站伪造一个看似可信的元素（如PayPal的donate按钮，或一个Send按钮-by Gmail等你可能使用的邮箱网站），根据RSnake and Jeremiah的调查证明，用户点击这些貌似可信的Sites的任何元素都可能触发你的话筒或者摄像头，远程攻击者可同时立即对你进行监控。 更常用的方法是，攻击者在他控制的网站用框架包含一个可信Sites，剥除掉上下文或者透明化这个Sites，这样他就可以轻易的操控你，而你最后可能就是给他发送转账，或者给他任何特权，而这些操作用户是完全不知晓的，后台进行；更甚的，如果这个恶意站点允许使用JS，那么攻击者可以及其轻松的把隐藏的元素精确地放置在鼠标指针下，这样的话不管用户点哪儿，攻击者都赢了；更更有甚的，攻击者可以在JS被禁用的情况下进行欺骗，只需要骗取用户点击一个链接或者按钮。 注意：点击劫持在任何浏览器上都存在，因为点击劫持不是浏览器漏洞或者Bug造成的，不能一夜就打上补丁；相反，点击劫持是利用最基本的标准Web特点，在任何位置都能实现，而这种天然缺陷是无法在短时间内改善的。 点击劫持是一种视觉上的欺骗手段。大概有两种方式，一是攻击者使用一个透明的，不可见的iframe，覆盖在一个网页上，然后诱使用户在该页面上进行操作，此时用户将在不知情的情况下点击透明的iframe页面，可以诱使用户恰好点击在iframe页面的一些功能性按钮上；二是攻击者使用一张图片覆盖在网页，遮挡网页原有位置的含义。 iframe覆盖先写一个src.html，模拟源网页。123456789101112131415161718192021222324252627&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;原页面&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;style&gt; button&#123; position:absolute; top: 315px; left: 462px; z-index: 1; width: 72px; height: 26px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick=&quot;func()&quot;&gt;加关注&lt;/button&gt; &lt;/body&gt; &lt;script&gt; function func()&#123; alert(&quot;关注成功！&quot;); &#125; &lt;/script&gt;&lt;/html&gt; 这个页面有一个按钮，点击后触发事件。 再写一个jack.html，劫持页面。123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;点击劫持&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;style&gt; html,body,iframe&#123; display: block; height: 100%; width: 100%; margin: 0; padding: 0; border:none; &#125; iframe&#123; opacity:0; filter:alpha(opacity=0); position:absolute; z-index:2; &#125; button&#123; position:absolute; top: 335px; left: 462px; z-index: 1; width: 72px; height: 26px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; 那些不能说的秘密 &lt;button&gt;查看详情&lt;/button&gt; &lt;iframe src=&quot;src.html&quot;&gt;&lt;/iframe&gt; &lt;/body&gt;&lt;/html&gt; 这个页面用一个按钮覆盖了原网页的按钮，用户点击后，实际就点击到了原网页的按钮。 将透明度调一下查看按钮布局 图片覆盖先在之前的src.html中加入一个logo图片 在jack.html中同样添加一个图片 调解透明度可以看到背后实际情况 假如LOGO图片对应的链接是某个网站，那么用户点击该图片，就会被链接到假的网站上。 图片也可以伪装得像正常的链接，按钮；或者图片中构造文字，覆盖在关键位置，可能会改变原有的意思。这种情况下，不需要用户点击，也能达到欺骗的目的，比如覆盖了页面的联系电话。 防御iframe防御通常可以写一段JavaScript代码，以禁止iframe的嵌套。123if(top.location != location)&#123; top.location = self.location;&#125; 在src中加入该代码，再访问jack.html，发现浏览器自动跳转到了src.html。 由于是用JavaScript写的，这样的控制能力不是特别强，有许多方法可以绕过它。一个更好的方案是使用一个HTTP头——X-Frame-Options。 X-Frame-Options可以说是为了解决ClickJacking而生的。 它有三个可选值 DENY：浏览器拒绝当前页面加载任何frame页面 SAMEORIGIN：frame页面的地址只能为同源域名下的页面 ALLOW-FROM origin：定义允许frame加载的页面地址 图片防御由于&lt;img&gt;标签在很多系统中是对用户开放的，因此在现实中有非常多的站点存在被图片覆盖攻击的可能。在防御时，需要检查用户提交的html代码中，&lt;img&gt;标签的style属性是否可能导致浮出。 SQL注入简介通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。 具体来说，它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。 场景比如我们开发了一个登陆模块，查询语句是1select * from user where name = $&#123;name&#125; and password = $&#123;password&#125;; 正常情况下，我们拿到用户输入的用户名和密码拼接出来的语句是1select * from user where name = &quot;admin&quot; and password = &quot;123456&quot;; 如果用户输入用户名为 “xxx” or 1 #，密码随便。那么拼接的语句就变成了1select * from user where username = &quot;xxx&quot; or 1 # and password = &quot;123456&quot;; “#”会使后面的and password = “123456”变成注释，这个语句会查询出所有用户，所以验证通过，成功登陆了系统。 防范一般来说，从以下几点防范sql注入。 校验用户的输入 拿到用户数据后，可以通过正则表达式，限制长度，对引号和”-“,”#”进行转换或过滤等。 使用预处理语句 不要使用动态拼装SQL，而是使用参数化的SQL或者直接使用存储过程进行数据查询存取。 比如之前的例子，在mybatis中，如果使用#{}代替${}，编写的sql如下 1select * from user where name = #&#123;name&#125; and password = #&#123;password&#125;; 这句话会在程序运行时会先编辑成带参数的sql语句 1select * from user where name = ? and password = ?; 当用户输入 “xxx” or 1 # 时，实际语句 1select * from user where name = &quot;&apos;xxx&apos; or 1 #&quot; and password = &quot;123456&quot;; 这样是查不到用户的，所以登陆失败。 当然有些地方必须使用$，比如order by name desc，这里的name desc都是传参进来的，直接按照参数字符串本身的含义。 1select * from gooods order by $&#123;param&#125;; 这种情况下，我们必须严格控制传进来的参数。后台最好写方法确保参数正常。比如 1234567891011121314 //检验排序字段 private String orderColumn(String orderColumn)&#123; //定义或获取可用排序字段集 //判定外部传进来的参数字段是否存在于字段集中 //如果存在，返回正确结果字段，不存在可抛出错误。 &#125; //检验排序顺序 private String orderStringtoOrder(String orderString)&#123; String order = &quot;asc&quot;; if(!orderString.isEmpty() &amp;&amp; orderString.equals(&quot;desc&quot;))&#123; order = &quot;desc&quot;; &#125; return order;&#125; 严格控制排序参数的正确性。 最小权限策略 不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接，保证其正常使用即可。 这么做的好处是，即使当前用户被攻破了，入侵者只能获取极小一部分权限，防止危害扩大。 加密信息 不要把密码等机密信息明文存放，加密或者hash掉密码和敏感的信息。 异常提醒 有些应用直接返回了异常信息给用户页面，这是很不安全的，通过这些异常信息，使用者可以知道程序栈，数据库类型甚至版本号等信息，这将有利于其进一步攻击。 应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装，把异常信息存放在独立的表中。 参考参考书籍： 白帽子讲Web安全参考链接： http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html http://blog.csdn.net/baidu_24024601/article/details/51957270 http://www.cnblogs.com/lovesong/p/5248483.html http://blog.csdn.net/stilling2006/article/details/8526458 http://blog.csdn.net/baochao95/article/details/52025180]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hessian入门使用]]></title>
      <url>%2F2017%2F06%2F19%2Fhessian%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[简介Hessian是caucho公司开发的一种基于二进制RPC协议（Remote Procedure Call protocol）的轻量级远程调用框架。 在Java中使用Hessian： 服务器端： 包含Hessian.jar包 设计一个接口，用来给客户端调用 实现该接口的功能 配置web.xml，配好相应的servlet 由于使用二进制RPC协议传输数据，对象必须进行序列化，实现Serializable 接口 对于复杂对象可以使用Map的方法传递 客户端： 包含Hessian.jar包 具有和服务器端结构一样的接口。包括命名空间都最好一样 利用HessianProxyFactory调用远程接口 入门例子到 http://hessian.caucho.com/ 下载hessian.jar包，我这里使用的是hessian-4.0.51.jar。 服务器端 Eclipse新建一个Web工程，命名为HseeionService。将hessian.jar包放入WEB-INF/lib中，并引入之； 创建pojo类； 12345678910111213141516171819202122232425package app.demo;import java.io.Serializable;public class User implements Serializable &#123; private static final long serialVersionUID = 153519254199840035L; String userName = &quot;soopy&quot;; String password = &quot;showme&quot;; public User(String user, String pwd)&#123; this.userName = user; this.password = pwd; &#125; public String getUserName()&#123; return userName; &#125; public String getPassword()&#123; return password; &#125;&#125; 创建接口 1234567package app.demo;public interface BasicAPI &#123; public void setGreeting(String greeting); public String hello(); public User getUser();&#125; 实现接口 12345678910111213141516171819202122package app.demo;public class BasicService implements BasicAPI &#123; private String _greeting = &quot;Hello, world&quot;; @Override public void setGreeting(String greeting) &#123; _greeting = greeting; &#125; @Override public String hello() &#123; return _greeting; &#125; @Override public User getUser() &#123; return new User(&quot;prance&quot;, &quot;meshow&quot;); &#125;&#125; 配置web.xml 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;&gt; &lt;servlet&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;servlet-class&gt;com.caucho.hessian.server.HessianServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;service-class&lt;/param-name&gt; &lt;param-value&gt;app.demo.BasicService&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 服务器测试test.jsp 123456789101112131415&lt;%@ page import=&quot;com.caucho.hessian.client.HessianProxyFactory,app.demo.BasicAPI&quot;%&gt;&lt;%@page language=&quot;java&quot;%&gt;&lt;%HessianProxyFactory factory = new HessianProxyFactory();String url = (&quot;http://&quot; +request.getServerName() + &quot;:&quot; +request.getServerPort() +request.getContextPath() + &quot;/hello&quot;);out.println(url);out.println(&quot;&lt;br&gt;&quot;);BasicAPI basic = (BasicAPI) factory.create(BasicAPI.class,url);out.println(&quot;Hello: &quot; + basic.hello());out.println(&quot;&lt;br&gt;&quot;);out.println(&quot;Hello: &quot; + basic.getUser() .getUserName() );out.println(&quot;&lt;br&gt;&quot;);out.println(&quot;Hello: &quot; +basic.getUser().getPassword() );%&gt; 将HessianService部署到Tomcat等服务器上，访问 http://localhost:8080/HessianService/test.jsp ，浏览器结果： 1234http://localhost:8080/HessianService/helloHello: Hello, worldHello: pranceHello: meshow 客户端 创建一个工程，命名为HessianClient，同样引入hessian.jar包； 创建和服务端一样的pojo类； 创建和服务端一样的接口； 创建客户端 1234567891011121314151617181920package app.demo;import java.net.MalformedURLException;import com.caucho.hessian.client.HessianProxyFactory;public class BasicClient &#123; public static void main(String[] args) throws MalformedURLException &#123; String url =&quot;http://127.0.0.1:8080/HessianService/hello&quot;; HessianProxyFactory factory = new HessianProxyFactory(); BasicAPI basic = (BasicAPI) factory.create(BasicAPI.class, url); System.out.println(&quot;Hello:&quot; + basic.hello()); System.out.println(&quot;Hello:&quot; + basic.getUser().getUserName()); System.out.println(&quot;Hello:&quot; + basic.getUser().getPassword()); basic.setGreeting(&quot;HelloGreeting&quot;); System.out.println(&quot;Hello:&quot; + basic.hello()); &#125;&#125; 运行客户端代码，控制台结果： 1234Hello:Hello, worldHello:pranceHello:meshowHello:HelloGreeting 说明这里服务端和客户端都编写了同样的接口和基础类，只是为了演示简单例子。在实际使用中，应该是服务端将自己的接口及所需类打成jar包给客户端引入调用。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[DataTables使用入门]]></title>
      <url>%2F2017%2F06%2F19%2FDataTables%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[简介Datatables是一款jquery表格插件。它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。 分页，即时搜索和排序 几乎支持任何数据源：DOM， javascript， Ajax 和 服务器处理 支持不同主题 DataTables, jQuery UI, Bootstrap, Foundation 各式各样的扩展: Editor, TableTools, FixedColumns …… 丰富多样的option和强大的API 支持国际化 超过2900+个单元测试 免费开源 （ MIT license ）！ 商业支持 更多特性请到DataTables中文网查看 下载可以到DataTables中文网下载最新版本的文档。 下载完目录如下： 我们将使用media目录下的文件。 简单使用在项目中使用Datatables，只需要引用三个文件即可，jQuery库，一个DT的核心js文件和一个DT的css文件。 demo目录 demo.html1234567891011121314151617&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;DataTables Demo&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.dataTables.css&quot;&gt;&lt;/link&gt; &lt;/head&gt; &lt;body&gt; &lt;table id=&quot;table_id_example&quot; class=&quot;display&quot;&gt; &lt;caption&gt;最近交易记录&lt;/caption&gt; &lt;/table&gt; &lt;/body&gt; &lt;script src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/jquery.dataTables.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/demo.js&quot;&gt;&lt;/script&gt;&lt;/html&gt; demo.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135$(document).ready( function () &#123; var data = [ [ &quot;20170527150032890&quot;, &quot;-0.10 CNY&quot;, &quot;提现&quot;, &quot;失败&quot;, &quot;2017-05-27 15:00:32&quot;, &quot;提现&quot;, &quot;&quot; ], [ &quot;20170527145824609&quot;, &quot;-3.00 CNY&quot;, &quot;冻结&quot;, &quot;成功&quot;, &quot;2017-05-27 14:58:24&quot;, &quot;冻结金额&quot;, &quot;&quot; ], [ &quot;20170527145704263&quot;, &quot;-3.00 CNY&quot;, &quot;提现&quot;, &quot;失败&quot;, &quot;2017-05-27 14:57:04&quot;, &quot;提现&quot;, &quot;&quot; ], [ &quot;20170527145226988&quot;, &quot;-100.00 CNY&quot;, &quot;冻结&quot;, &quot;成功&quot;, &quot;2017-05-27 14:52:26&quot;, &quot;冻结金额&quot;, &quot;&quot; ], [ &quot;20170525121845479&quot;, &quot;-0.01 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-27 09:28:09&quot;, &quot;重新提现&quot;, &quot;&lt;button class=&apos;btn btn-warning btn-block&apos; onclick=alert(&apos;haha&apos;) &gt;取消提现&lt;/button&gt;&quot; ], [ &quot;20170527144117493&quot;, &quot;-0.11 CNY&quot;, &quot;提现&quot;, &quot;成功&quot;, &quot;2017-05-27 00:00:00&quot;, &quot;虚拟提现(冻结金额)&quot;, &quot;&quot; ], [ &quot;20170526165926389&quot;, &quot;-12.00 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-26 16:59:26&quot;, &quot;提现&quot;, &quot;&lt;button class=&apos;btn btn-warning btn-block&apos; onclick=alert(&apos;haha&apos;) &gt;取消提现&lt;/button&gt;&quot; ], [ &quot;20170526165802358&quot;, &quot;-2.00 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-26 16:58:02&quot;, &quot;提现&quot;, &quot;&quot; ], [ &quot;20170526165520190&quot;, &quot;-1.00 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-26 16:55:20&quot;, &quot;提现&quot;, &quot;&lt;button class=&apos;btn btn-warning btn-block&apos; onclick=alert(&apos;haha&apos;) &gt;取消提现&lt;/button&gt;&quot; ], [ &quot;20170526161241519&quot;, &quot;-1.00 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-26 16:12:41&quot;, &quot;提现&quot;, &quot;&quot; ], [ &quot;20170526165802358&quot;, &quot;-99.00 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-26 16:58:02&quot;, &quot;提现&quot;, &quot;&quot; ], [ &quot;20170526165520190&quot;, &quot;-99.00 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-26 16:55:20&quot;, &quot;提现&quot;, &quot;&quot; ], [ &quot;20170526161241519&quot;, &quot;-99.00 CNY&quot;, &quot;提现&quot;, &quot;已受理&quot;, &quot;2017-05-26 16:12:41&quot;, &quot;提现&quot;, &quot;&quot; ] ]; //DataTables 初始化 $(&apos;#table_id_example&apos;).DataTable( &#123; data: data, columns: [ &#123; title: &apos;批次号&apos; &#125;, &#123; title: &apos;金额&apos; &#125;, &#123; title: &apos;交易类型&apos; &#125;, &#123; title: &apos;交易状态&apos; &#125;, &#123; title: &apos;交易时间&apos; &#125;, &#123; title: &apos;交易信息&apos; &#125;, &#123; title: &apos;操作&apos; &#125; ] &#125; );&#125; ); 结果 添加国际化Datatables中所使用的语言选项是通过 language 来配置的。 这是一个对象字符串，通过一个参数来描述Datatables的每个部分。 Datatables默认的是英语，这里我们改成中文。在demo.js文件添加 language 配置项，使其DataTables初始化代码像这样：1234567891011121314151617181920212223242526272829303132333435363738//DataTables 初始化$(&apos;#table_id_example&apos;).DataTable( &#123; data: data, columns: [ &#123; title: &apos;批次号&apos; &#125;, &#123; title: &apos;金额&apos; &#125;, &#123; title: &apos;交易类型&apos; &#125;, &#123; title: &apos;交易状态&apos; &#125;, &#123; title: &apos;交易时间&apos; &#125;, &#123; title: &apos;交易信息&apos; &#125;, &#123; title: &apos;操作&apos; &#125; ], // 国际化 language: &#123; &quot;sProcessing&quot;: &quot;处理中...&quot;, &quot;sLengthMenu&quot;: &quot;显示 _MENU_ 项结果&quot;, &quot;sZeroRecords&quot;: &quot;没有匹配结果&quot;, &quot;sInfo&quot;: &quot;显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项&quot;, &quot;sInfoEmpty&quot;: &quot;显示第 0 至 0 项结果，共 0 项&quot;, &quot;sInfoFiltered&quot;: &quot;(由 _MAX_ 项结果过滤)&quot;, &quot;sInfoPostFix&quot;: &quot;&quot;, &quot;sSearch&quot;: &quot;搜索:&quot;, &quot;sUrl&quot;: &quot;&quot;, &quot;sEmptyTable&quot;: &quot;表中数据为空&quot;, &quot;sLoadingRecords&quot;: &quot;载入中...&quot;, &quot;sInfoThousands&quot;: &quot;,&quot;, &quot;oPaginate&quot;: &#123; &quot;sFirst&quot;: &quot;首页&quot;, &quot;sPrevious&quot;: &quot;上页&quot;, &quot;sNext&quot;: &quot;下页&quot;, &quot;sLast&quot;: &quot;末页&quot; &#125;, &quot;oAria&quot;: &#123; &quot;sSortAscending&quot;: &quot;: 以升序排列此列&quot;, &quot;sSortDescending&quot;: &quot;: 以降序排列此列&quot; &#125; &#125;&#125; ); 结果如图 关于表列上面我们的写法是动态添加title123456789columns: [ &#123; title: &apos;批次号&apos; &#125;, &#123; title: &apos;金额&apos; &#125;, &#123; title: &apos;交易类型&apos; &#125;, &#123; title: &apos;交易状态&apos; &#125;, &#123; title: &apos;交易时间&apos; &#125;, &#123; title: &apos;交易信息&apos; &#125;, &#123; title: &apos;操作&apos; &#125;] 官网是另一种写法，首先在table里写好表列字段名，如：12345678&lt;thead&gt; &lt;tr&gt; &lt;th&gt;name&lt;/th&gt; &lt;th&gt;position&lt;/th&gt; &lt;th&gt;salary&lt;/th&gt; &lt;th&gt;office&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt; 然后上面columns写法稍微有点不同123456columns: [ &#123; data: &apos;name&apos; &#125;, &#123; data: &apos;position&apos; &#125;, &#123; data: &apos;salary&apos; &#125;, &#123; data: &apos;office&apos; &#125;] 这样也是完全OK的，具体怎么用看自己喜好和实际业务了。 服务器支持一次性处理大量数据DataTables性能会下降，因为 DT 需要渲染，数据越多，速度就越慢。 为了解决这个问题， DataTables 提供了服务器模式，把本来客户端所做的事情交给服务器去处理， 比如排序（order）、分页（paging）、过滤（filter）。 启用服务器模式时，每次请求 DataTables 会向服务器发送一些参数（当前分页，排序，搜索参数等），服务器则返回组装好的数据。 demo.html1234567891011121314151617181920212223242526&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;DataTables Demo&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.dataTables.css&quot;&gt;&lt;/link&gt; &lt;/head&gt; &lt;body&gt; &lt;table id=&quot;city&quot; class=&quot;display&quot;&gt; &lt;caption&gt;city&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;name&lt;/th&gt; &lt;th&gt;countryCode&lt;/th&gt; &lt;th&gt;district&lt;/th&gt; &lt;th&gt;population&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;/table&gt; &lt;/body&gt; &lt;script src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/jquery.dataTables.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/demo.js&quot;&gt;&lt;/script&gt;&lt;/html&gt; demo.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647$(document).ready( function () &#123; //DataTables 初始化 $(&apos;#country&apos;).DataTable( &#123; &quot;processing&quot;: true, //开启加载等待提示，提示信息是下面language中的sProcessing配置 &quot;serverSide&quot;: true, //打开服务器模式 &quot;ajax&quot;: &#123; &quot;url&quot;: &quot;city/getall&quot;, &quot;type&quot;: &quot;POST&quot;, &quot;data&quot;: function(d)&#123; //d包含了DataTables发送到服务器的参数，这里还可以根据自己的业务添加参数 //可以自定义一些业务参数 //d.xxx = &quot;xxx&quot;; &#125; &#125;, &quot;columns&quot;: [ &#123; &quot;data&quot;: &apos;id&apos; &#125;, &#123; &quot;data&quot;: &apos;name&apos; &#125;, &#123; &quot;data&quot;: &apos;countryCode&apos; &#125;, &#123; &quot;data&quot;: &apos;district&apos; &#125;, &#123; &quot;data&quot;: &apos;population&apos; &#125; ], // 国际化 language: &#123; &quot;sProcessing&quot;: &quot;处理中...&quot;, &quot;sLengthMenu&quot;: &quot;显示 _MENU_ 项结果&quot;, &quot;sZeroRecords&quot;: &quot;没有匹配结果&quot;, &quot;sInfo&quot;: &quot;显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项&quot;, &quot;sInfoEmpty&quot;: &quot;显示第 0 至 0 项结果，共 0 项&quot;, &quot;sInfoFiltered&quot;: &quot;(由 _MAX_ 项结果过滤)&quot;, &quot;sInfoPostFix&quot;: &quot;&quot;, &quot;sSearch&quot;: &quot;搜索:&quot;, &quot;sUrl&quot;: &quot;&quot;, &quot;sEmptyTable&quot;: &quot;表中数据为空&quot;, &quot;sLoadingRecords&quot;: &quot;载入中...&quot;, &quot;sInfoThousands&quot;: &quot;,&quot;, &quot;oPaginate&quot;: &#123; &quot;sFirst&quot;: &quot;首页&quot;, &quot;sPrevious&quot;: &quot;上页&quot;, &quot;sNext&quot;: &quot;下页&quot;, &quot;sLast&quot;: &quot;末页&quot; &#125;, &quot;oAria&quot;: &#123; &quot;sSortAscending&quot;: &quot;: 以升序排列此列&quot;, &quot;sSortDescending&quot;: &quot;: 以降序排列此列&quot; &#125; &#125; &#125; );&#125; ); 查看结果在浏览器调试窗口，我们可以看到发送到后台的参数(即上面ajax请求中d的数据)：12345678910111213141516171819202122232425262728293031323334353637draw:1 //确保Ajax从服务器返回的是对应的，服务器接收到此参数后再返回columns[0][data]:idcolumns[0][name]:columns[0][searchable]:truecolumns[0][orderable]:truecolumns[0][search][value]:columns[0][search][regex]:falsecolumns[1][data]:namecolumns[1][name]:columns[1][searchable]:truecolumns[1][orderable]:truecolumns[1][search][value]:columns[1][search][regex]:falsecolumns[2][data]:countryCodecolumns[2][name]:columns[2][searchable]:truecolumns[2][orderable]:truecolumns[2][search][value]:columns[2][search][regex]:falsecolumns[3][data]:districtcolumns[3][name]:columns[3][searchable]:truecolumns[3][orderable]:truecolumns[3][search][value]:columns[3][search][regex]:falsecolumns[4][data]:populationcolumns[4][name]:columns[4][searchable]:truecolumns[4][orderable]:truecolumns[4][search][value]:columns[4][search][regex]:falseorder[0][column]:0 //告诉后台那些列是需要排序的order[0][dir]:asc //告诉后台列排序的方式， desc 降序 asc 升序start:0 //第一条数据的起始位置，比如0代表第一条数据length:10 //告诉服务器每页显示的条数search[value]: //全局的搜索条件，此demo为空search[regex]:false //为true代表全局搜索的值是作为正则表达式处理 服务器返回的数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&#123; &quot;recordsFiltered&quot;: 4079, //过滤后的记录数 &quot;data&quot;: [ //表格中需要显示的数据。 &#123; &quot;countryCode&quot;: &quot;AFG&quot;, &quot;district&quot;: &quot;Kabol&quot;, &quot;name&quot;: &quot;Kabul&quot;, &quot;id&quot;: 1, &quot;population&quot;: 1780000 &#125;, &#123; &quot;countryCode&quot;: &quot;AFG&quot;, &quot;district&quot;: &quot;Qandahar&quot;, &quot;name&quot;: &quot;Qandahar&quot;, &quot;id&quot;: 2, &quot;population&quot;: 237500 &#125;, &#123; &quot;countryCode&quot;: &quot;AFG&quot;, &quot;district&quot;: &quot;Herat&quot;, &quot;name&quot;: &quot;Herat&quot;, &quot;id&quot;: 3, &quot;population&quot;: 186800 &#125;, &#123; &quot;countryCode&quot;: &quot;AFG&quot;, &quot;district&quot;: &quot;Balkh&quot;, &quot;name&quot;: &quot;Mazar-e-Sharif&quot;, &quot;id&quot;: 4, &quot;population&quot;: 127800 &#125;, &#123; &quot;countryCode&quot;: &quot;NLD&quot;, &quot;district&quot;: &quot;Noord-Holland&quot;, &quot;name&quot;: &quot;Amsterdam&quot;, &quot;id&quot;: 5, &quot;population&quot;: 731200 &#125;, &#123; &quot;countryCode&quot;: &quot;NLD&quot;, &quot;district&quot;: &quot;Zuid-Holland&quot;, &quot;name&quot;: &quot;Rotterdam&quot;, &quot;id&quot;: 6, &quot;population&quot;: 593321 &#125;, &#123; &quot;countryCode&quot;: &quot;NLD&quot;, &quot;district&quot;: &quot;Zuid-Holland&quot;, &quot;name&quot;: &quot;Haag&quot;, &quot;id&quot;: 7, &quot;population&quot;: 440900 &#125;, &#123; &quot;countryCode&quot;: &quot;NLD&quot;, &quot;district&quot;: &quot;Utrecht&quot;, &quot;name&quot;: &quot;Utrecht&quot;, &quot;id&quot;: 8, &quot;population&quot;: 234323 &#125;, &#123; &quot;countryCode&quot;: &quot;NLD&quot;, &quot;district&quot;: &quot;Noord-Brabant&quot;, &quot;name&quot;: &quot;Eindhoven&quot;, &quot;id&quot;: 9, &quot;population&quot;: 201843 &#125;, &#123; &quot;countryCode&quot;: &quot;NLD&quot;, &quot;district&quot;: &quot;Noord-Brabant&quot;, &quot;name&quot;: &quot;Tilburg&quot;, &quot;id&quot;: 10, &quot;population&quot;: 193238 &#125; ], &quot;draw&quot;: 1, //Datatables发送的draw是多少那么服务器就返回多少 &quot;recordsTotal&quot;: 4079 //数据库里总共记录数&#125; 点此查看更多服务器处理参数。 小结DataTables是一个表格插件。既可以一次性获取大量数据在前端做分页处理（一般不推荐，数据量较大时客户端压力大，处理慢），也可以使用服务器处理分页（只返回当前页面的数据）。 常用的参数可能就那么几个，我们可以直接使用它们，也可以自己封装参数，比如”search[value]”我们可以改成”keyword”再传给后台，”order[0][column]”可以先在前端转换成对应”orderColumn”再传入后台，还可以加上其它特定的业务参数等。 其他一些未提及的，比如服务器模式的自定义回调函数，勇敢的去官网或google探索吧。 总体感觉，使用简单，配置灵活。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MyBatis分页插件PageHelper]]></title>
      <url>%2F2017%2F06%2F19%2FMyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%2F</url>
      <content type="text"><![CDATA[简介PageHelper是一个Mybatis的分页插件，可以方便地对查询结果进行分页和排序。 在spring + mybatis 中使用 pagehelper1. maven添加依赖123456&lt;!-- mybatis 分页插件 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;4.1.4&lt;/version&gt;&lt;/dependency&gt; 2. 编写mybatis-config.xml12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;!-- 配置管理器 --&gt; &lt;configuration&gt; &lt;plugins&gt; &lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt; &lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt; &lt;!-- 4.0.0以后版本可以不设置该参数 --&gt; &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt; &lt;!-- 该参数默认为false --&gt; &lt;!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 --&gt; &lt;!-- 和startPage中的pageNum效果一样--&gt; &lt;property name=&quot;offsetAsPageNum&quot; value=&quot;true&quot;/&gt; &lt;!-- 该参数默认为false --&gt; &lt;!-- 设置为true时，使用RowBounds分页会进行count查询 --&gt; &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot;/&gt; &lt;!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 --&gt; &lt;!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）--&gt; &lt;property name=&quot;pageSizeZero&quot; value=&quot;true&quot;/&gt; &lt;!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 --&gt; &lt;!-- 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 --&gt; &lt;!-- 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 --&gt; &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt; &lt;!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 --&gt; &lt;!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 --&gt; &lt;!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 --&gt; &lt;!-- 不理解该含义的前提下，不要随便复制该配置 --&gt; &lt;property name=&quot;params&quot; value=&quot;pageNum=start;pageSize=limit;&quot;/&gt; &lt;!-- 支持通过Mapper接口参数来传递分页参数 --&gt; &lt;property name=&quot;supportMethodsArguments&quot; value=&quot;true&quot;/&gt; &lt;!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page --&gt; &lt;property name=&quot;returnPageInfo&quot; value=&quot;check&quot;/&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/configuration&gt; 3. 在spring-mybatis配置文件中引入上述配置1234567&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt; &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis/mybatis-config.xml&quot; /&gt; &lt;!-- 自动扫描mapping.xml文件 --&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/demo/mapping/*.xml&quot;&gt;&lt;/property&gt; &lt;/bean&gt; 4. 业务逻辑代码 mapper.xml 1234567891011121314151617&lt;select id=&quot;getAll&quot; resultMap=&quot;BaseResultMap&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot; /&gt; FROM city WHERE 1 = 1 &lt;if test=&quot;pattern != null and pattern != &apos;&apos;&quot;&gt; AND ( name like CONCAT(&apos;%&apos;, #&#123;pattern&#125;, &apos;%&apos;) OR countrycode like CONCAT(&apos;%&apos;, #&#123;pattern&#125;, &apos;%&apos;) OR district like CONCAT(&apos;%&apos;, #&#123;pattern&#125;, &apos;%&apos;) OR population like CONCAT(&apos;%&apos;, #&#123;pattern&#125;, &apos;%&apos;) ) &lt;/if&gt;&lt;/select&gt; dao 1public List&lt;Map&lt;String,Object&gt;&gt; getAll(Map&lt;String,Object&gt; params); service 1public List&lt;Map&lt;String, Object&gt;&gt; getAll(Map&lt;String,Object&gt; params); serviceImpl 123public List&lt;Map&lt;String, Object&gt;&gt; getAll(Map&lt;String,Object&gt; params) &#123; return dao.getAll(params);&#125; controller 123456789101112131415// 设置分页及排序参数：pageNum,页数，从1开始；pageSize，页面大小，每页查询数据量，如10；orderBy，排序字段及顺序，如&quot;name desc&quot;PageHelper.startPage(pageNum, pageSize);PageHelper.orderBy(orderBy);// 业务模糊查询参数Map&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();params.put(&quot;pattern&quot;, patternStr);// 查询List&lt;Map&lt;String, Object&gt;&gt; dataList = cityService.getAll(params);PageInfo&lt;Map&lt;String, Object&gt;&gt; pageInfo = new PageInfo&lt;Map&lt;String, Object&gt;&gt;(dataList);// 结果pageInfo.getTotal();// 总结果数，如4079pageInfo.getList();// 数据结果，本次查询返回结果，如10个 ajax请求 1234567891011&quot;ajax&quot;: &#123; &quot;url&quot;: &quot;city/getall&quot;, &quot;type&quot;: &quot;POST&quot;, &quot;data&quot;: &#123; pageNum: 1; //查询第一页 pageSize: 10; //查询10条记录 orderColumn: &quot;name&quot;; // 后台的orderBy通过这里的orderColumn + orderDir拼接而成。 orderDir: &quot;desc&quot;; //但是为了防止sql注入及非法参数，最好后台增加方法判断参数合法性，并返回合法值。 pattern: &quot;tenny&quot;; //业务相关参数，模糊查询 &#125;&#125; 查看结果通过日志可以看到，插件对sql做了处理：1.先查询一条总数，2.在原sql上加入分页条件进行查询。1234562017-06-19 11:15:38,569 DEBUG [com.demo.dao.ICityDao.getAll_COUNT] - ==&gt; Preparing: SELECT count(0) FROM city WHERE 1 = 1 2017-06-19 11:15:38,601 DEBUG [com.demo.dao.ICityDao.getAll_COUNT] - ==&gt; Parameters: 2017-06-19 11:15:38,841 DEBUG [com.demo.dao.ICityDao.getAll_COUNT] - &lt;== Total: 12017-06-19 11:15:38,850 DEBUG [com.demo.dao.ICityDao.getAll] - ==&gt; Preparing: SELECT id, name, countrycode, district, population FROM city WHERE 1 = 1 order by id asc limit ?,? 2017-06-19 11:15:38,850 DEBUG [com.demo.dao.ICityDao.getAll] - ==&gt; Parameters: 0(Integer), 10(Integer)2017-06-19 11:15:38,854 DEBUG [com.demo.dao.ICityDao.getAll] - &lt;== Total: 10 pageInfo封装了查询条件及结果集：1PageInfo&#123;pageNum=1, pageSize=10, size=10, startRow=1, endRow=10, total=4079, pages=408, list=Page&#123;count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4079, pages=408, countSignal=false, orderBy=&apos;id asc&apos;, orderByOnly=false, reasonable=true, pageSizeZero=true&#125;, firstPage=1, prePage=0, nextPage=2, lastPage=8, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigatepageNums=[1, 2, 3, 4, 5, 6, 7, 8]&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[zookeeper入门]]></title>
      <url>%2F2017%2F05%2F04%2Fzookeeper%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[zookeeper 简介Zookeeper 分布式服务框架是 Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。 zookeeper 单机使用访问http://zookeeper.apache.org/releases.html 并下载最新版本的ZooKeeper，这里我使用的版本是3.4.8。 下载完成后解压缩。进入conf目录，创建zoo.cfg配置文件(可复制已有的zoo_sample.cfg修改)。12345tickTime=2000initLimit=10syncLimit=5dataDir=/tmp/zookeeperclientPort=2181 说明一下几个配置项的意义(initLimit和syncLimit暂时先不管，后面有说明)： tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。 dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。 clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。 保存配置文件，返回进入bin目录，双击zkService.cmd启动服务，控制台看到如下启动信息：12345...2017-05-04 16:42:38,924 [myid:] - INFO [main:ZooKeeperServer@787] - tickTime set to 20002017-05-04 16:42:38,924 [myid:] - INFO [main:ZooKeeperServer@796] - minSessionTimeout set to -12017-05-04 16:42:38,925 [myid:] - INFO [main:ZooKeeperServer@805] - maxSessionTimeout set to -12017-05-04 16:42:38,993 [myid:] - INFO [main:NIOServerCnxnFactory@89] - binding to port 0.0.0.0/0.0.0.0:2181 再双击zkCli.cmd启动客户端，控制台显示如下信息：1234...WATCHER::[zk: localhost:2181(CONNECTED) 0]WatchedEvent state:SyncConnected type:None path:null ZooKeeper客户端用于与ZooKeeper服务器进行交互，下面来进行简单的操作。 创建Znodes创建具有给定路径的znode。 语法1create /path data 示例：12create /FirstZnode &quot;myfirstzookeeper-app&quot;Created /FirstZnode 使用参数可以指定创建的节点模式CreateMode，CreateMode有下面几种： PERSISTENT：创建后只要不删就永久存在 EPHEMERAL：会话结束年结点自动被删除，EPHEMERAL结点不允许有子节点 SEQUENTIAL：节点名末尾会自动追加一个10位数的单调递增的序号，同一个节点的所有子节点序号是单调递增的 PERSISTENT_SEQUENTIAL：结合PERSISTENT和SEQUENTIAL EPHEMERAL_SEQUENTIAL：结合EPHEMERAL和SEQUENTIAL 默认情况下，所有znode都是持久的。 创建Sequential znode，请添加-s标志，语法如下1create -s /path data 示例：12[zk: localhost:2181(CONNECTED) 1] create -s /FirstZnode &quot;second-data&quot;Created /FirstZnode0000000006 创建Ephemeral Znode，请添加-e标志，语法如下1create -e /path data 示例：12[zk: localhost:2181(CONNECTED) 2] create -e /SecondZnode &quot;Ephemeral-data&quot;Created /SecondZnode 当客户端连接丢失时，临时znode将被删除。下面我们会通过退出ZooKeeper客户端，然后重新打开zkCli来验证。 获取数据获取znode的数据，包括数据上次修改的时间，修改的位置等其他相关信息。 语法1get /path 示例：12345678910111213[zk: localhost:2181(CONNECTED) 3] get /FirstZnodemyfirstzookeeper-appcZxid = 0x151ctime = Thu May 04 17:02:34 CST 2017mZxid = 0x151mtime = Thu May 04 17:02:34 CST 2017pZxid = 0x151cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 20numChildren = 0 访问Sequential znode，必须输入znode的完整路径，语法如下1get /path00000000xx 示例：12345678910111213[zk: localhost:2181(CONNECTED) 4] get /FirstZnode0000000006second-datacZxid = 0x152ctime = Thu May 04 17:10:34 CST 2017mZxid = 0x152mtime = Thu May 04 17:10:34 CST 2017pZxid = 0x152cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 11numChildren = 0 这里我们来验证Ephemeral Znode。 先获取一次:12345678910111213[zk: localhost:2181(CONNECTED) 5] get /SecondZnodeEphemeral-datacZxid = 0x153ctime = Thu May 04 17:13:21 CST 2017mZxid = 0x153mtime = Thu May 04 17:13:21 CST 2017pZxid = 0x153cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x15bd2a018370000dataLength = 14numChildren = 0 关闭zkCli命令行窗口，等待40s，重启客户端，再次尝试获取：12get /SecondZnodeNode does not exist: /SecondZnode 可以看到临时znode已经不存在了，而永久节点是存在的：12345678910111213[zk: localhost:2181(CONNECTED) 1] get /FirstZnodemyfirstzookeeper-appcZxid = 0x151ctime = Thu May 04 17:02:34 CST 2017mZxid = 0x151mtime = Thu May 04 17:02:34 CST 2017pZxid = 0x151cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 20numChildren = 0 这里说一下，客户端连接断了之后，ZK不会马上移除临时数据，只有当SESSIONEXPIRED之后，才会把这个会话建立的临时数据移除。 而SESSIONEXPIRED是取决于客户端和服务端两方面的。 zk server端timeout参数： tickTime：zk的心跳间隔（heartbeat interval），也是session timeout基本单位，单位为微妙。 minSessionTimeout: 最小超时时间，zk设置的默认值为2*tickTime。 maxSessionTimeout：最大超时时间，zk设置的默认值为20*tickTime。 我们配置文件的tickTime为2000，所以这里服务端最大超时时间为20*2000ms = 40s。 zk client端timeout参数：这里cmd命令行不清楚怎么设置，但是应该也有默认的值，不过默认值也不知道= =!。 查看zookeeper源码可知，服务端拿到客户端的超时时间后，是会做一些判断的，客户端超时时间实际限制在{2*tickeTime, 20*tickTime}范围内。假设客户端设置了timeout为100s，实际40s就已经超时了；类似如果客户端设置timeout为1s，也要等到4s才超时。 回到我们的测试，建立临时节点，如果关闭客户端后立刻(4s内)连接上，临时节点仍然存在，而等待40s后session一定过期，临时节点就被删除了。 设置数据设置指定znode的数据。 语法1set /path data-updated 示例：123456789101112[zk: localhost:2181(CONNECTED) 4] set /FirstZnode &quot;myfirstzookeeper-app1.1&quot;cZxid = 0x151ctime = Thu May 04 17:02:34 CST 2017mZxid = 0x15dmtime = Thu May 04 17:46:18 CST 2017pZxid = 0x151cversion = 0dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 23numChildren = 0 查看结果：12345678910111213[zk: localhost:2181(CONNECTED) 5] get /FirstZnodemyfirstzookeeper-app1.1cZxid = 0x151ctime = Thu May 04 17:02:34 CST 2017mZxid = 0x15dmtime = Thu May 04 17:46:18 CST 2017pZxid = 0x151cversion = 0dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 23numChildren = 0 设置监听当指定的znode或znode的子数据更改时，watch会显示通知。 语法1get /path [watch] 1 示例：12345678910111213[zk: localhost:2181(CONNECTED) 6] get /FirstZnode 1myfirstzookeeper-app1.1cZxid = 0x151ctime = Thu May 04 17:02:34 CST 2017mZxid = 0x15dmtime = Thu May 04 17:46:18 CST 2017pZxid = 0x151cversion = 0dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 23numChildren = 0 设置了监听的节点被修改后，输出会稍微不同，带有watch信息12345678910111213141516[zk: localhost:2181(CONNECTED) 7] set /FirstZnode &quot;myfirstzookeeper-app1.2&quot;WATCHER::cZxid = 0x151WatchedEvent state:SyncConnected type:NodeDataChanged path:/FirstZnodectime = Thu May 04 17:02:34 CST 2017mZxid = 0x15emtime = Thu May 04 17:52:14 CST 2017pZxid = 0x151cversion = 0dataVersion = 2aclVersion = 0ephemeralOwner = 0x0dataLength = 23numChildren = 0 创建子节点创建子节点类似于创建新的znode。唯一的区别是子节点znode的路径包含了父路径。 语法1create /parentpath/childpath data 示例：1234[zk: localhost:2181(CONNECTED) 8] create /FirstZnode/Child1 &quot;firstchildren&quot;Created /FirstZnode/Child1[zk: localhost:2181(CONNECTED) 9] create /FirstZnode/Child2 &quot;secondchildren&quot;Created /FirstZnode/Child2 查看子节点查看znode所有的子节点。 语法1ls /path 示例：12[zk: localhost:2181(CONNECTED) 10] ls /FirstZnode[Child2, Child1] 查看根目录下所有节点：12[zk: localhost:2181(CONNECTED) 11] ls /[dubbo, FirstZnode0000000006, zookeeper, FirstZnode] 检查状态查看指定znode的元数据。包含详细信息，如时间戳，版本号，ACL，数据长度和子节点znode。 语法1stat /path 示例：123456789101112[zk: localhost:2181(CONNECTED) 12] stat /FirstZnodecZxid = 0x151ctime = Thu May 04 17:02:34 CST 2017mZxid = 0x15emtime = Thu May 04 17:52:14 CST 2017pZxid = 0x160cversion = 2dataVersion = 2aclVersion = 0ephemeralOwner = 0x0dataLength = 23numChildren = 2 删除节点删除指定的znode及其所有子节点。 语法1rmr /path 示例：123[zk: localhost:2181(CONNECTED) 13] rmr /FirstZnode[zk: localhost:2181(CONNECTED) 14] get /FirstZnodeNode does not exist: /FirstZnode 还有一种删除，只能删除没有子节点的节点，语法：1delete /path 示例：12345678910[zk: localhost:2181(CONNECTED) 17] create /myZnode &quot;mydata&quot;Created /myZnode[zk: localhost:2181(CONNECTED) 18] create /myZnode/child1 &quot;child1data&quot;Created /myZnode/child1[zk: localhost:2181(CONNECTED) 19] delete /myZnodeNode not empty: /myZnode[zk: localhost:2181(CONNECTED) 20] delete /myZnode/child1[zk: localhost:2181(CONNECTED) 21] delete /myZnode[zk: localhost:2181(CONNECTED) 22] get /myZnodeNode does not exist: /myZnode zookeeper 数据模型简单使用了zookeeper之后，我们发现其数据模型有些像操作系统的文件结构，结构如下图所示 每个节点在zookeeper中叫做znode，并且其有一个唯一的路径标识，如/Server1节点的标识就为/NameService/Server1。 znode可以有子znode，并且znode里可以存数据，但是EPHEMERAL类型的节点不能有子节点。 znode中的数据可以有多个版本，比如某一个路径下存有多个数据版本，那么查询这个路径下的数据就需要带上版本。 znode可以是临时节点，一旦创建这个znode的客户端与服务器失去联系，这个znode也将自动删除。zookeeper的客户端和服务器通信采用长连接方式，每个客户端和服务器通过心跳来保持连接，这个连接状态称为session，如果这个session失效，临时znode也就删除了。 znode的目录名可以自动编号，如sznode0000000001已经存在，再创建sznode的话，将会自动命名为sznode0000000002。 znode可以被监控，包括这个目录节点中存储的数据的修改，子节点目录的变化等，一旦变化可以通知设置监控的客户端，这个功能是zookeeper对于应用最重要的特性，通过这个特性可以实现的功能包括配置的集中管理，集群管理，分布式锁等等。 Zookeeper APIZnode是ZooKeeper核心组件，ZooKeeper API提供了方法来操纵znode。 客户端遵循以下步骤来与ZooKeeper进行清晰和干净的交互： 连接到ZooKeeper服务。ZooKeeper服务为客户端分配会话ID。 定期向服务器发送心跳。否则，ZooKeeper将设定会话ID过期，客户端需要重新连接。 只要会话ID处于活动状态，就可以获取/设置znode。 所有任务完成后，断开与ZooKeeper服务的连接。 如果客户端长时间不活动，则ZooKeeper服务将自动断开客户端。 示例：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import java.io.IOException;import java.util.List;import org.apache.zookeeper.CreateMode;import org.apache.zookeeper.KeeperException;import org.apache.zookeeper.WatchedEvent;import org.apache.zookeeper.Watcher;import org.apache.zookeeper.ZooDefs;import org.apache.zookeeper.ZooKeeper;import org.apache.zookeeper.data.Stat;/** * Test Zookeeper * * @author tenny.peng */public class TestZookeeper &#123; public static void main(String[] args) &#123; try &#123; // 创建一个Zookeeper实例。param1:目标服务器地址和端口；param2:Session超时时间；param3:节点变化时的回调方法。 ZooKeeper zk = new ZooKeeper(&quot;127.0.0.1:2181&quot;, 500000, new Watcher() &#123; // 监控所有被触发的事件 public void process(WatchedEvent event) &#123; // dosomething System.out.println(&quot;监听事件： &quot; + event.toString()); &#125; &#125;); // 创建一个节点。param1:节点路径；param2:节点数据；param3:权限控制；这里表示所有人都可以操作；param4:节点类型，这里为永久。 zk.create(&quot;/FirstZnode&quot;, &quot;my first zookeeper app&quot;.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); // 查看一个节点是否存在。param1:znode路径；param2:是否监测(watch)查看的节点，重载方法：可传入自定义watch。 Stat stat = zk.exists(&quot;/FirstZnode&quot;, true); System.out.println(&quot;version: &quot; + stat.getVersion()); // 获取一个节点的数据。param1:znode路径；param2:是否监测(watch)，重载方法：可传入自定义watch；param3:znode的元数据。 byte[] b = zk.getData(&quot;/FirstZnode&quot;, true, stat); String data = new String(b); System.out.println(data); // 修改一个节点的数据。param1:znode路径；param2:节点数据；param3:znode当前的版本号，-1无视被修改的数据版本，直接改掉。每当数据更改时，ZooKeeper会更新znode的版本号。 zk.setData(&quot;/FirstZnode&quot;, &quot;my first zookeeper app1.1&quot;.getBytes(), stat.getVersion()); stat = zk.exists(&quot;/FirstZnode&quot;, true); System.out.println(&quot;version: &quot; + stat.getVersion()); b = zk.getData(&quot;/FirstZnode&quot;, true, stat); data = new String(b); System.out.println(data); // 创建子节点，和创建节点一样。 zk.create(&quot;/FirstZnode/child1&quot;, &quot;child1 data&quot;.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create(&quot;/FirstZnode/child2&quot;, &quot;child2 data&quot;.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); // 获取子节点。param1:znode路径；param2:是否监测(watch)，重载方法：可传入自定义watch。 List&lt;String&gt; children = zk.getChildren(&quot;/FirstZnode&quot;, true); for (int i = 0; i &lt; children.size(); i++) &#123; System.out.println(children.get(i)); &#125; // 删除节点，如有子节点必须先删除子节点。param1:znode路径；param2:znode的当前版本，－1的话直接删除，无视版本。 zk.delete(&quot;/FirstZnode/child1&quot;, -1); zk.delete(&quot;/FirstZnode/child2&quot;, -1); zk.delete(&quot;/FirstZnode&quot;, -1); // 关闭session zk.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (KeeperException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 结果：12345678910监听事件： WatchedEvent state:SyncConnected type:None path:nullversion: 0my first zookeeper app监听事件： WatchedEvent state:SyncConnected type:NodeDataChanged path:/FirstZnodeversion: 1my first zookeeper app1.1child2child1监听事件： WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/FirstZnode监听事件： WatchedEvent state:SyncConnected type:NodeDeleted path:/FirstZnode zookeeper 集群Zookeeper 不仅可以单机提供服务，同时也支持多机组成集群来提供服务。实际上 Zookeeper 还支持另外一种伪集群的方式，也就是可以在一台物理机上运行多个 Zookeeper 实例。 下面介绍伪集群模式的安装和配置： 新建一个总文件夹zookeeperCluster用于存放集群； zookeeperCluster文件夹下建立三个文件夹server1，server2，server3； 每个server里面新建一个data文件夹和一个log文件夹，并复制一份单机的zookeeper的文件夹； 每个server/data下新建一个myid文件并写入一个数字，server1就写1，server2写2，server3写3。Zookeeper 启动时会读取这个文件，拿到里面的数据与 zoo.cfg 里面的配置信息比较从而判断当前 server 到底是哪个 server。 进入各个server/zookeeper/conf目录，编辑zoo.cfg。由于是在一台机器上部署多个server，每个server要用不同的clientPort，比如server1是2181，server2是2182，server3是2183，dataDir和dataLogDir也要修改成相应路径。 123456789tickTime=2000initLimit=10syncLimit=4dataDir=D:/devsoft/zookeeperCluster/server1/datadataLogDir=D:/devsoft/zookeeperCluster/server1/logclientPort=2181server.1=127.0.0.1:2888:3888server.2=127.0.0.1:2889:3889server.3=127.0.0.1:2890:3890 分别启动三个server/zookeeper/bin/zkServer.cmd。 说明一下集群的几个配置参数 initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 10 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 10*2000=20 秒。 syncLimit：这个配置项标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 4*2000=8 秒。 server.A=B:C:D：其中 A 是一个数字，表示这个是第几号服务器；B 是这个服务器的 ip 地址；C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。 启动第一个server,这时会报大量错误。122017-05-06 17:26:12,366 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:FastLeaderElection@852] - Notification time out: 800 没关系，因为现在集群只起了1台server，zookeeper服务器端起来会根据zoo.cfg的服务器列表发起选举leader的请求，因为连不上其他机器而报错。我们再起第二个zookeeper服务，leader将会被选出，从而一致性服务开始可以使用，这是因为3台机器只要有2台可用就可以选出leader并且对外提供服务(2n+1台机器，可以容n台机器挂掉)。122017-05-06 17:26:39,573 [myid:2] - INFO [WorkerSender[myid=2]:QuorumPeer$QuorumServer@149] - Resolved hostname: 127.0.0.1 to address: /127.0.0.1 再启动最后一个zookeeper服务。1232017-05-06 17:27:11,071 [myid:3] - INFO [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:2183:FileTxnSnapLog@240] - Snapshotting: 0x700000000 to D:\devsoft\zookeeperCluster\server3\data\version-2\snapshot.700000000 开启一个客户端zkCli.cmd，可以看到成功连接集群中的master。1232017-05-06 17:27:11,071 [myid:3] - INFO [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:2183:FileTxnSnapLog@240] - Snapshotting: 0x700000000 to D:\devsoft\zookeeperCluster\server3\data\version-2\snapshot.700000000 然后客户端就可以像之前单机一样进行各种操作。123456789ls /[zookeeper][zk: localhost:2181(CONNECTED) 1] create /testZnode &quot;testdata&quot;Created /testZnode[zk: localhost:2181(CONNECTED) 2] ls /[zookeeper, testZnode][zk: localhost:2181(CONNECTED) 3] delete /testZnode[zk: localhost:2181(CONNECTED) 4] ls /[zookeeper] ZooKeeper 典型的应用场景Zookeeper 从设计模式角度来看，是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper 就将负责通知已经在 Zookeeper 上注册的那些观察者做出相应的反应，从而实现集群中类似 Master/Slave 管理模式。 下面详细介绍这些典型的应用场景。 配置管理（Configuration Management）配置的管理在分布式应用环境中很常见，例如同一个应用系统需要多台 PC Server 运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。 像这样的配置信息完全可以交给 Zookeeper 来管理，将配置信息保存在 Zookeeper 的某个目录节点中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 Zookeeper 的通知，然后从 Zookeeper 获取新的配置信息应用到系统中。 比如将APP1的所有配置配置到/APP1 znode下，APP1所有机器一启动就对/APP1这个节点进行监控，并且实现回调方法Watcher，那么在zookeeper上/APP1 znode节点下数据发生变化的时候，每个机器都会收到通知，Watcher方法将会被执行，那么应用再取下数据即可。 集群管理（Group Membership）Zookeeper 能够很容易的实现集群管理的功能，如有多台 Server 组成一个服务集群，那么必须要一个“总管”知道当前集群中每台机器的服务状态，一旦有机器不能提供服务，集群中其它集群必须知道，从而做出调整重新分配服务策略。同样当增加集群的服务能力时，就会增加一台或多台 Server，同样也必须让“总管”知道。 Zookeeper 不仅能够帮你维护当前的集群中机器的服务状态，而且能够帮你选出一个“总管”，让这个总管来管理集群，这就是 Zookeeper 的另一个功能 Leader Election。 它们的实现方式都是在 Zookeeper 上创建一个 EPHEMERAL 类型的目录节点，然后每个 Server 在它们创建目录节点的父目录节点上调用 getChildren(String path, boolean watch) 方法并设置 watch 为 true，由于是 EPHEMERAL 目录节点，当创建它的 Server 死去，这个目录节点也随之被删除，所以 Children 将会变化，这时 getChildren上的 Watch 将会被调用，所以其它 Server 就知道已经有某台 Server 死去了。新增 Server 也是同样的原理。 Zookeeper 如何实现 Leader Election，也就是选出一个 Master Server。和前面的一样每台 Server 创建一个 EPHEMERAL 目录节点，不同的是它还是一个 SEQUENTIAL 目录节点，所以它是个 EPHEMERAL_SEQUENTIAL 目录节点。之所以它是 EPHEMERAL_SEQUENTIAL 目录节点，是因为我们可以给每台 Server 编号，我们可以选择当前是最小编号的 Server 为 Master，假如这个最小编号的 Server 死去，由于是 EPHEMERAL 节点，死去的 Server 对应的节点也被删除，所以当前的节点列表中又出现一个最小编号的节点，我们就选择这个节点为当前 Master。这样就实现了动态选择 Master，避免了传统意义上单 Master 容易出现单点故障的问题。 总结通过命令行和API使用了zookeeper的基本功能。Zoopkeeper 提供了一套很好的分布式集群管理的机制，即基于层次型的目录树的数据结构，并对树中的节点进行有效管理，从而可以设计出多种多样的分布式的数据管理模型。 参考链接：http://www.w3cschool.cn/zookeeper/ http://www.blogjava.net/BucketLi/archive/2010/12/21/341268.html https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring整合dubbo(zookeeper)]]></title>
      <url>%2F2017%2F05%2F04%2Fspring%E6%95%B4%E5%90%88dubbo-zookeeper%2F</url>
      <content type="text"><![CDATA[dubbo是什么Dubbo是阿里巴巴公司开源的一个高性能优秀的分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。可以和Spring框架无缝集成。 主要核心部件 远程通讯：提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。 集群容错：提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。 自动发现：基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。 dubbo能做什么 透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。 软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。 服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。 dubbo的架构 节点角色说明： Provider：暴露服务方称之为“服务提供者”。 Consumer：调用远程服务方称之为“服务消费者”。 Registry：服务注册与发现的中心目录服务称之为“服务注册中心”。 Monitor：统计服务的调用次数和调用时间的日志服务称之为“服务监控中心”。 Container：服务运行容器。 调用关系说明： 服务容器负责启动，加载，运行服务提供者。 服务提供者在启动时，向注册中心注册自己提供的服务。 服务消费者在启动时，向注册中心订阅自己所需的服务。 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。 spring集成使用Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可，Dubbo基于Spring的Schema扩展进行加载。 下载zookeeperzookeeper是一个分布式服务框架，本例使用zookeeper管理dubbo服务。下载地址：http://www.apache.org/dyn/closer.cgi/zookeeper/ 下载后解压即可，进入zookeeper根目录下的bin目录，如D:\devsoft\zookeeper-3.4.8\bin，双击zkServer.cmd启动注册中心服务。 服务提供者新建一个maven工程，作为服务提供方。 pom.xml除了基本的spring等依赖，额外添加dubbo和zkclient依赖：12345678910111213&lt;!-- spring dubbo 整合 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;2.5.3&lt;/version&gt;&lt;/dependency&gt;&lt;!-- dubbo注册在zookeeper上，必须引用zkclient --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.1&lt;/version&gt;&lt;/dependency&gt; spring-dubbo.xml12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt; &lt;!-- 提供方应用信息，用于计算依赖关系 --&gt; &lt;dubbo:application name=&quot;dubbo_service_provider&quot; /&gt; &lt;!--使用zookeeper注册中心暴露和发现服务地址 --&gt; &lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot; /&gt; &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt; &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt; &lt;!-- 声明需要暴露的服务接口 --&gt; &lt;dubbo:service interface=&quot;com.news.service.IDubboService&quot; ref=&quot;dubboService&quot; /&gt; &lt;!-- 具体的实现bean --&gt; &lt;bean id=&quot;dubboService&quot; class=&quot;com.news.service.impl.DubboServiceImpl&quot; /&gt;&lt;/beans&gt; IDubboService &amp; DubboServiceImpl12345678910package com.news.service;/** * TODO * * @author tenny.peng */public interface IDubboService &#123; public void sayHello(String name);&#125; 1234567891011121314151617package com.news.service.impl;import com.news.service.IDubboService;/** * TODO * * @author tenny.peng */public class DubboServiceImpl implements IDubboService &#123; @Override public void sayHello(String name) &#123; System.out.println(&quot;hello: &quot; + name); &#125;&#125; TestDubbo.java1234567891011121314151617181920package news;import java.io.IOException;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * TODO * * @author tenny.peng */public class TestDubbo &#123; public static void main(String[] args) throws IOException &#123; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;dubbo/spring-dubbo.xml&quot;); System.in.read(); // 为保证服务一直开着，利用输入流的阻塞来模拟 &#125;&#125; 运行TestDubbo.java，我们的服务提供方就完成了。 服务消费者再新建一个maven工程，作为服务消费者。 pom.xml消费者引入之前服务提供者的服务(这里引用了整个项目，实际中项目会分层，只需引用对应的service层即可)。12345&lt;dependency&gt; &lt;groupId&gt;org.news&lt;/groupId&gt; &lt;artifactId&gt;news&lt;/artifactId&gt; &lt;version&gt;$&#123;news.version&#125;&lt;/version&gt;&lt;/dependency&gt; 服务提供者对应的工程信息：1234&lt;groupId&gt;org.news&lt;/groupId&gt;&lt;artifactId&gt;news&lt;/artifactId&gt;&lt;packaging&gt;war&lt;/packaging&gt;&lt;version&gt;0.0.1&lt;/version&gt; spring-dubbo.xml12345678910111213141516171819&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt; &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt; &lt;dubbo:application name=&quot;dubbo_service_consumer&quot; /&gt; &lt;!--使用zookeeper注册中心暴露和发现服务地址 --&gt; &lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;127.0.0.1:2181&quot; /&gt; &lt;!-- 生成远程服务代理，可以像使用本地bean一样使用userService --&gt; &lt;dubbo:reference id=&quot;dubboService&quot; interface=&quot;com.news.service.IDubboService&quot;/&gt;&lt;/beans&gt; 这里的”dubbo:application name”虽然说名字不要一样，实际测试一样也没啥问题。。。 TestDubbo.java12345678910111213141516171819202122package test;import java.io.IOException;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.news.service.IDubboService;/** * TODO * * @author tenny.peng */public class TestDubbo &#123; public static void main(String[] args) throws IOException &#123; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-dubbo.xml&quot;); IDubboService dubboService = (IDubboService) context.getBean(&quot;dubboService&quot;); dubboService.sayHello(&quot;dubbo&quot;); &#125;&#125; 运行TestDubbo.java，可以发现服务提供方的控制台输出1hello: dubbo 说明服务已经被调用成功了。 dubbo管理页面网上搜索dubbo控制台页面，下载dubbo-admin.war。自己下载的地址：http://www.pc6.com/softview/SoftView_468561.html 使用方法先把tomcat下的webapps\ROOT目录下内容清空，将war包解压，解压的内容放进ROOT目录下。进入tomcat下的bin目录，运行startup.bat。 运行如果出现类似如下错误1Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &apos;URIType&apos; of bean class [com.alibaba.citrus.service.uribroker.uri.GenericURIBroker]: Bean property &apos;URIType&apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? 因为使用的jdk版本为1.8，不支持dubbo-admin中编写的方法。参考：http://blog.csdn.net/liutengteng130/article/details/47112683 解决办法可以降低jdk版本到1.7，但是项目都用了1.8，不想单独为它改环境变量。另一个办法是：找到tomcat/bin目录中的setclasspath.bat，修改setclasspath.bat文件：12345678910if &quot;&quot;%1&quot;&quot; == &quot;&quot;debug&quot;&quot; goto needJavaHomeset JAVA_HOME=D:\devsoft\Java\jdk1.7.0_71rem Otherwise either JRE or JDK are fineif not &quot;%JRE_HOME%&quot; == &quot;&quot; goto gotJreHomeif not &quot;%JAVA_HOME%&quot; == &quot;&quot; goto gotJavaHomeecho Neither the JAVA_HOME nor the JRE_HOME environment variable is definedecho At least one of these environment variable is needed to run this programgoto exit 在合适位置加上这一行：set JAVA_HOME=D:\devsoft\Java\jdk1.7.0_71 查看页面启动成功后，浏览器输入http://localhost:8080/ 就可以访问了。 第一次进入要求输入账号密码，默认root/root。 管理页面 应用页面 提供者页面 消费者页面 服务页面 参考博客：http://www.cnblogs.com/Javame/p/3632473.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring加载多个xml遇到的问题]]></title>
      <url>%2F2017%2F04%2F27%2Fspring%E5%8A%A0%E8%BD%BD%E5%A4%9A%E4%B8%AAxml%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[问题出现之前学习spring整合redis，spring整合activemq，单独测试没有问题。后来想把他们一起部署启动，结果报错1Could not resolve placeholder &apos;redis.maxTotal&apos; in string value &quot;$&#123;redis.maxTotal&#125;&quot; 查找原因查了一会找到了原因。因为我的spring-redis.xml和spring-activemq.xml都写了一个1&lt;context:property-placeholder location=&quot;classpath:conf/xxx.properties&quot; /&gt; 而Spring容器采用反射扫描的发现机制，在探测到Spring容器中有一个org.springframework.beans.factory.config.PropertyPlaceholderConfigurer的Bean就会停止对剩余PropertyPlaceholderConfigurer的扫描。 而这个基于命名空间的配置，其实内部就是创建一个PropertyPlaceholderConfigurer Bean而已。换句话说，即Spring容器仅允许最多定义一个PropertyPlaceholderConfigurer(或)，其余的会被Spring忽略掉（其实Spring如果提供一个警告就好了）。 这样的话，其实就只加载了第一个properties文件，后面的并没有加载，自然也就找不到’redis.maxTotal’了。 尝试解决按照网上的办法，去掉每个xml单独的context:property-placeholder，再写一个xml文件一次性加载所有资源文件，并引入之前单独的所有xml文件。 先将web文件的1234567context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt; classpath:spring-activemq.xml, classpath:spring-redis.xml &lt;/param-value&gt;&lt;/context-param&gt; 改为123456context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt; classpath:applicationContext.xml &lt;/param-value&gt; &lt;/context-param&gt; 编写这个applicationContext.xml如下：1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;context:property-placeholder location=&quot;classpath:conf/*.properties&quot; /&gt; &lt;import resource=&quot;activemq/spring-activemq.xml&quot; /&gt; &lt;import resource=&quot;redis/spring-redis.xml&quot; /&gt;&lt;/beans&gt; 这样部署启动应该就可以了。 新的问题按道理应该启动成功，不过我这里又遇到另一个问题1Cannot convert value of type [org.springframework.data.redis.connection.jedis.JedisConnectionFactory] to required type [javax.jms.ConnectionFactory] for property &apos;connectionFactory&apos;: no matching editors or conversion strategy found 再查原因查看自己的spring-redis.xml12345678&lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;p:hostName=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot; c:poolConfig-ref=&quot;poolConfig&quot;&gt;&lt;/bean&gt;&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt; &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt; &lt;property name=&quot;keySerializer&quot; ref=&quot;keySerializer&quot; /&gt;&lt;/bean&gt; 并没有需要’javax.jms.ConnectionFactory’，根据问题在网上搜索，在一篇博客看到了’redis也有个bean叫connectionFactory’的字眼。于是想到自己应该也是bean name重复了。查看spring-activemq.xml123456789&lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&gt; &lt;property name=&quot;targetConnectionFactory&quot; ref=&quot;pooledConnectionFactory&quot;/&gt; &lt;/bean&gt;&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt; &lt;bean id=&quot;jmsTemplate&quot; class=&quot;org.springframework.jms.core.JmsTemplate&quot;&gt; &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt; &lt;property name=&quot;defaultDestinationName&quot; value=&quot;$&#123;activemq.queue.name&#125;&quot;/&gt; &lt;/bean&gt; 解决问题问题就很明显了，spring-redis.xml和spring-activemq.xml都有connectionFactory这个bean。于是修改了spring-redis.xml中的bean name12345678&lt;bean id=&quot;redisConnectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;p:hostName=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot; c:poolConfig-ref=&quot;poolConfig&quot;&gt;&lt;/bean&gt;&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt; &lt;property name=&quot;connectionFactory&quot; ref=&quot;redisConnectionFactory&quot; /&gt; &lt;property name=&quot;keySerializer&quot; ref=&quot;keySerializer&quot; /&gt;&lt;/bean&gt; 再次部署启动，OK。 参考博客：http://www.iteye.com/topic/1131688 http://blog.csdn.net/AlbertFly/article/details/51503079]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring的MessageSource]]></title>
      <url>%2F2017%2F04%2F25%2Fspring%E7%9A%84MessageSource%2F</url>
      <content type="text"><![CDATA[spring-message.xml配置messageSource路径。12345678910111213&lt;bean id=&quot;messageSource&quot; class=&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;&gt; &lt;property name=&quot;basenames&quot;&gt; &lt;list&gt; &lt;value&gt;classpath:message/message&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;&lt;/bean&gt;&lt;bean id=&quot;messageHelper&quot; class=&quot;com.news.common.utils.MessageHelper&quot;&gt; &lt;property name=&quot;messageSource&quot; ref=&quot;messageSource&quot;/&gt;&lt;/bean&gt; MessageHelper信息工具类，通过spring注入。核心是上面配置的messageSource，可针对不同地区/国家加载不同的信息文件(message.properties)。12345678910111213141516171819202122232425import java.util.Locale;import org.springframework.context.MessageSource;public class MessageHelper &#123; private static MessageSource messageSource; public static void setMessageSource(MessageSource messageSource) &#123; MessageHelper.messageSource = messageSource; &#125; public static String getMessage(String code) &#123; return getMessage(code, null); &#125; public static String getMessage(String code, Object[] args) &#123; return messageSource.getMessage(code, args, Locale.getDefault()); &#125; public static String getMessage(String code, Object[] args, Locale locale) &#123; return messageSource.getMessage(code, args, locale); &#125;&#125; message_zh_CN.properties &amp; message_en_US.propertiesmessage_zh_CN，针对中文语言环境。1234#用户提示u0001=用户名或密码不能为空！u0002=用户名&quot;&#123;0&#125;&quot;已存在！u0003=用户名或密码错误！ message_en_US.properties，针对英文(国际)语言环境。1234#user tipsu0001=username or password cannot be null!u0002=username &quot;&#123;0&#125;&quot; is already exist！u0003=username or password is error! TestMeaage.java使用默认本地语言环境(中文)和指定语言环境(英文)分别测试。1234567891011121314151617181920212223242526import java.util.Locale;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.news.common.utils.MessageHelper;/** * TODO * * @author tenny.peng */public class TestMessage &#123; public static void main(String[] args) &#123; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-message.xml&quot;); System.out.println(MessageHelper.getMessage(&quot;u0001&quot;)); System.out.println(MessageHelper.getMessage(&quot;u0002&quot;, new String[] &#123; &quot;tenny&quot; &#125;)); System.out.println(MessageHelper.getMessage(&quot;u0003&quot;)); System.out.println(MessageHelper.getMessage(&quot;u0001&quot;, null, Locale.US)); System.out.println(MessageHelper.getMessage(&quot;u0002&quot;, new String[] &#123; &quot;tenny&quot; &#125;, Locale.US)); System.out.println(MessageHelper.getMessage(&quot;u0003&quot;, null, Locale.US)); &#125;&#125; 输出123456用户名或密码不能为空！用户名&quot;tenny&quot;已存在！用户名或密码错误！username or password cannot be null!username &quot;tenny&quot; is already exist!username or password is error! 方法说明messageSource.getMessage(code, args, locale)有三个参数： 消息的编码值； 对应消息的参数，没有就传null； java.util.Locale参数。locale为null时，根据使用者的语言环境决定Locale，从而决定要加载的message文件。 上面的测试先后加载了messages_zh_CN.properties和message_en_US.properties资源文件。 这其中还有一个控制点在JVM，JVM会根据当前操作系统的语言环境进行相应处理，我们可以通过在JVM启动参数中追加“-Duser.lang ge=zh_TW”来设定当前JVM语言类型，通过JVM级的设定，也可以实现自动切换所使用的资源文件类型。 所以这里面的控制语言的方式有三种：从最低层的操作系统的Locale设定，到更上一层的JVM的Locale设定，再到程序一级的Locale设定。 参考博客：http://lixiaorong223.blog.163.com/blog/static/4401162920110106305224/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring整合activemq]]></title>
      <url>%2F2017%2F04%2F24%2Fspring%E6%95%B4%E5%90%88activemq%2F</url>
      <content type="text"><![CDATA[1.安装activemq到http://activemq.apache.org/ 下载最新版。我这里下载的是Windows版。 下载完成之后解压缩，运行bin目录下的activemq.bat，看到类似如下信息说明启动成功。1234567891011121314151617181920212223242526272829303132333435ACTIVEMQ_HOME: D:\devsoft\apache-activemq-5.1.0\bin\..ACTIVEMQ_BASE: D:\devsoft\apache-activemq-5.1.0\bin\..Loading message broker from: xbean:activemq.xmlINFO BrokerService - Using Persistence Adapter: AMQPersistenceAdapter(D:\devsoft\apache-activemq-5.1.0\bin\..\data)INFO BrokerService - ActiveMQ 5.1.0 JMS Message Broker (localhost) is startingINFO BrokerService - For help or more information please see: http://activemq.apache.org/INFO AMQPersistenceAdapter - AMQStore starting using directory: D:\devsoft\apache-activemq-5.1.0\bin\..\dataINFO KahaStore - Kaha Store using data directory D:\devsoft\apache-activemq-5.1.0\bin\..\data\kr-store\stateINFO AMQPersistenceAdapter - Active data files: []WARN AMQPersistenceAdapter - The ReferenceStore is not valid - recovering ...INFO KahaStore - Kaha Store successfully deleted data directory D:\devsoft\apache-activemq-5.1.0\bin\..\data\kr-store\dataINFO AMQPersistenceAdapter - Journal Recovery Started from: DataManager:(data-)INFO KahaStore - Kaha Store using data directory D:\devsoft\apache-activemq-5.1.0\bin\..\data\kr-store\dataINFO AMQPersistenceAdapter - Recovered 3611 operations from redo log in 0.85 seconds.INFO AMQPersistenceAdapter - Finished recovering the ReferenceStoreINFO TransportServerThreadSupport - Listening for connections at: tcp://Lenovo-PC:61616INFO TransportConnector - Connector openwire StartedINFO TransportServerThreadSupport - Listening for connections at: ssl://Lenovo-PC:61617INFO TransportConnector - Connector ssl StartedINFO TransportServerThreadSupport - Listening for connections at: stomp://Lenovo-PC:61613INFO TransportConnector - Connector stomp StartedINFO TransportServerThreadSupport - Listening for connections at: xmpp://Lenovo-PC:61222INFO TransportConnector - Connector xmpp StartedINFO NetworkConnector - Network Connector default-nc StartedINFO BrokerService - ActiveMQ JMS Message Broker (localhost, ID:Lenovo-PC-51314-1493018577517-0:0) startedINFO log - Logging to org.slf4j.impl.JCLLoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLogINFO log - jetty-6.1.9INFO WebConsoleStarter - ActiveMQ WebConsole initialized.INFO /admin - Initializing Spring FrameworkServlet &apos;dispatcher&apos;INFO log - ActiveMQ Console at http://0.0.0.0:8161/adminINFO log - ActiveMQ Web Demos at http://0.0.0.0:8161/demoINFO log - RESTful file access application at http://0.0.0.0:8161/fileserverINFO log - Started SelectChannelConnector@0.0.0.0:8161INFO FailoverTransport - Successfully connected to tcp://localhost:61616INFO TransportConnector - Connector vm://localhost Started 浏览器输入http://localhost:8161/admin/ 可查看本地activemq运行状态。 点击”Queues”可查看队列情况。现在没有信息，后面测试的时候会有信息。 2.Maven添加依赖123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-core&lt;/artifactId&gt; &lt;version&gt;5.7.0&lt;/version&gt; &lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt; &lt;version&gt;5.7.0&lt;/version&gt;&lt;/dependency&gt; 3.activemp.properties属性文件12345678# 服务器地址activemq.brokerURL=tcp://localhost:61616# 连接池的最大连接数activemq.maxConnections=10# 目的队列的名称activemq.queue.name=tenny:test 4.spring-activemq.xml配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:jms=&quot;http://www.springframework.org/schema/jms&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd&quot;&gt; &lt;context:property-placeholder location=&quot;classpath:activemq.properties&quot; /&gt; &lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt; &lt;bean id=&quot;targetConnectionFactory&quot; class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt; &lt;property name=&quot;brokerURL&quot; value=&quot;$&#123;activemq.brokerURL&#125;&quot;/&gt; &lt;/bean&gt; &lt;bean id=&quot;pooledConnectionFactory&quot; class=&quot;org.apache.activemq.pool.PooledConnectionFactory&quot; destroy-method=&quot;stop&quot;&gt; &lt;property name=&quot;connectionFactory&quot; ref=&quot;targetConnectionFactory&quot;/&gt; &lt;property name=&quot;maxConnections&quot; value=&quot;$&#123;activemq.maxConnections&#125;&quot;/&gt; &lt;/bean&gt; &lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&gt; &lt;property name=&quot;targetConnectionFactory&quot; ref=&quot;pooledConnectionFactory&quot;/&gt; &lt;/bean&gt; &lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt; &lt;bean id=&quot;jmsTemplate&quot; class=&quot;org.springframework.jms.core.JmsTemplate&quot;&gt; &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt; &lt;property name=&quot;defaultDestinationName&quot; value=&quot;$&#123;activemq.queue.name&#125;&quot;/&gt; &lt;/bean&gt; &lt;!--队列目的地，点对点模式--&gt; &lt;bean id=&quot;queueDestination&quot; class=&quot;org.apache.activemq.command.ActiveMQQueue&quot;&gt; &lt;constructor-arg&gt; &lt;value&gt; $&#123;activemq.queue.name&#125; &lt;/value&gt; &lt;/constructor-arg&gt; &lt;/bean&gt; &lt;!-- 消息监听器 --&gt; &lt;bean id=&quot;activeMQMessageListener&quot; class=&quot;com.news.common.activemq.ActiveMQMessageListener&quot; /&gt; &lt;!-- 消息监听容器 --&gt; &lt;bean id=&quot;jmsContainer&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt; &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt; &lt;property name=&quot;destination&quot; ref=&quot;queueDestination&quot; /&gt; &lt;property name=&quot;messageListener&quot; ref=&quot;activeMQMessageListener&quot; /&gt; &lt;/bean&gt;&lt;/beans&gt; 其中的ActiveMQMessageListener 1234567891011121314151617181920212223242526package com.news.common.activemq;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.TextMessage;/** * * activemq消息监听 * * @author Tenny.Peng */public class ActiveMQMessageListener implements MessageListener &#123; @Override public void onMessage(Message message) &#123; TextMessage textMsg = (TextMessage) message; try &#123; // 处理消息 System.out.println(&quot;receive message from &quot; + textMsg.getJMSDestination() + &quot;: &quot; + textMsg.getText()); &#125; catch (JMSException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 5.测试类TestActivemq.java12345678910111213141516171819202122232425262728293031323334package news;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.Session;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.jms.core.JmsTemplate;import org.springframework.jms.core.MessageCreator;/** * TODO * * @author tenny.peng */public class TestActivemq &#123; public static void main(String[] args) &#123; @SuppressWarnings(&quot;resource&quot;) ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-activemq.xml&quot;); JmsTemplate jmsTemplate = (JmsTemplate) context.getBean(&quot;jmsTemplate&quot;); final String destinationName = jmsTemplate.getDefaultDestinationName(); jmsTemplate.send(destinationName, new MessageCreator() &#123; @Override public Message createMessage(Session session) throws JMSException &#123; // 消息对象 String message = &quot;some information...&quot;; return session.createTextMessage(message); &#125; &#125;); &#125;&#125; 6.测试运行一次TestActivemq.java，控制台输出如下，监听器已收到消息。1receive message from queue://tenny:test: some information... 查看Queues界面。没有待处理消息，有1个消费者，已发送/接收了1条信息。 之前的控制台不要关，再运行一次TestActivemq.java，之前的控制台输出如下1receive message from queue://tenny:test: some information... 说明之前的监听器又收到了消息。 再查看Queues界面。有2个消费者，已发送/接收了2条消息。 还是不关控制台，修改TestActivemq.java中发送消息的destinationName1jmsTemplate.send(&quot;panda&quot;, new MessageCreator() 再运行TestActivemq.java，控制台没有任何输出，再查看Queues 可以看到有一条待处理消息，没有消费者，发出1条消息，接收0条消息。 这里tenny:test队列的消费者有3个，因为之前启动的监听器都是针对队列tenny:test的，并没有监听这个新的panda队列。 修改activemq.properties12# 目的队列的名称activemq.queue.name=panda 再运行TestActivemq.java，可以看到控制台输出12receive message from queue://panda: some information...receive message from queue://panda: some information... 说明这次启动的监听器收到了之前的和当前的消息。 再查看Queues界面，新的队列panda也有一个消费者，发送2条，接收2条(即刚才启动的针对队列panda的监听器接收)。 7.总结 消息按队列区分(如这里的tenny:test和panda)，每一个队列有生产者(发送消息)和消费者(接收消息)。当没有消费者的时候，生成者的消息就暂时悬挂起来，一旦有消费者空闲，就会接收消息。 在测试中，已启动两次TestActivemq.java后，不修改测试代码，继续运行多次TestActivemq.java。可以发现，每次运行后，发送的消息都是由之前的多个监听器随机接收。 这里测试直接使用了jmsTemplate，实际应用中，应该写一个service，将jmsTemplate作为私有变量，通过spring注入。然后根据业务封装自己发送的消息。 可以为每个业务模块配置单独的activemq.properties，编写对应的生产者service和监听器。每个模块的消息互不干扰。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo+github搭建博客]]></title>
      <url>%2F2017%2F04%2F21%2Fhexo%2Bgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[Hexo是一款基于Node.js的静态博客框架，配合github可以搭建属于自己的博客。 搭建环境安装Node.jsHexo需要node.js支持，可以到node.js中文网下载适合自己系统的安装包。安装也比较简单，一路next下去就可以了。 安装完后win + r 输入cmd回车，打开命令行界面，分别输入node -v 和npm -v，看到类似如下结果就说明安装成功了。1234&gt;node -vv6.10.1&gt;npm -v3.10.10 安装Hexo在合适的地方建立一个文件夹，用于安装hexo框架和存放你的博客。我的文件夹是D:\devsoft\hexo。 命令行切换到hexo目录1234567C:\Users\tenny&gt;d:D:\&gt;cd devsoftD:\devsoft&gt;cd hexoD:\devsoft\hexo&gt; 输入如下命令安装hexo到当前目录1npm install hexo-cli -g 命令行显示一系列安装详情，等待片刻，完成后，继续输入1npm install hexo --save 又会看到一堆信息，完成后，输入hexo -v检查下，看到类似如下信息，说明安装成功了。12345678910111213D:\devsoft\hexo&gt;hexo -vhexo: 3.2.2hexo-cli: 1.0.2os: Windows_NT 10.0.14393 win32 x64http_parser: 2.7.0node: 6.10.1v8: 5.1.281.95uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 58.2modules: 48openssl: 1.0.2k 配置Hexo命令行还在hexo根目录，输入1hexo init 继续输入1npm -install npm会自动安装需要的组件。之后输入1npm install hexo-deployer-git --save hexo扩展，用于将博客发布到github上。 体验博客本地博客继续输入hexo g生成文件1234567891011121314D:\devsoft\hexo&gt;hexo gINFO Start processingINFO Files loaded in 2.28 sINFO Generated: search.xmlINFO Generated: sitemap.xmlINFO Generated: atom.xmlINFO Generated: index.htmlINFO Generated: categories/index.htmlINFO Generated: about/index.htmlINFO Generated: tags/index.htmlINFO Generated: archives/index.htmlINFO Generated: favicon.icoINFO Generated: archives/2017/04/index.html...... //省略的文件信息 再输入hexo s启动服务123D:\devsoft\hexo&gt;hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 在浏览器中输入http://localhost:4000/ 就可以看到博客首页了。 要停止服务，在命令行按Ctrl + C。 建立博客仓库进入https://github.com/ 登录自己的账号，新建一个仓库，命名为yourname.github.io(这个就是你博客的访问地址，一定要这种格式，否则无效)。例如我的tenny-peng.github.io。 关于安装git和github可以参考我的Git简单教程，这里就略过了。 建立好自己的博客仓库(yourname.github.io)后，打开hexo根目录下的_config.yml，找到Deployment，修改成如下内容123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 例如我的123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:tenny-peng/tenny-peng.github.io.git branch: master 编写博客hexo根目录下执行1hexo new title &quot;test&quot; 然后在D:\devsoft\hexo\source_posts下就能看到test.md文件了。 .md文件是用MarkDown语法写的，关于MarkDown语法，可以参考我的MarkDown基础语法。MarkDown文件编辑器推荐用Atom，Atom是Github专门为程序员推出的一个跨平台文本编辑器。可以到https://atom.io/ 下载Atom，也可以找寻其他自己喜欢的MarkDown编辑器。 部署博客文章编辑完后，使用命令生成，部署12hexo g //生成静态文件hexo d //部署到github上 也可以直接执行以下命令，相当于上面两条命令一起执行1hexo d -g //部署前先生成 部署完成后，访问https://yourname.github.io (例如我的https://tenny-peng.github.io) ，就可以看到生成的文章。 使用主题主题可以使我们的博客更加个性化，更加美观，等等。这里我使用了NexT主题，其他主题配置可参考其说明，下面以NexT为例。 安装NexTHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。 如果你熟悉Git，建议你使用克隆最新版本的方式，之后的更新可以通过git pull来快速更新，而不用再次下载压缩包替换。这里我们使用git。 命令行切换到hexo根目录，执行1git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题找到hexo根目录下的站点配置文件_config.yml，修改theme1theme: next 设定SchemeScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 找到主题next目录下的_config.yml(注意：不是hexo根目录下的配置文件，根目录下的是全局博客配置，这个是针对某个主题的配置)，设定自己喜欢的Scheme，使用的去掉#，不使用的注释#。12345678# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mistscheme: Pisces 站点设置编辑站点配置文件，设置博客标题，作者，语言等，更多配置可自行查询。1234# Sitetitle: Tenny&apos;s Blogauthor: Tenny Penglanguage: zh-Hans //简体中文 菜单配置编辑主题配置文件，设置首页分类标签等目录，更多配置可自行查询。123456menu: home: / categories: /categories about: /about archives: /archives tags: /tags 这里设定的目录都必须手动创建在hexo/source目录下，否则发布到github上是找不到的。 头像设置编辑主题配置文件，修改avatar(如没有可新建)1avatar: /images/avatar.jpg 这里的图片需要放在主题目录下(themes/next/source/images/avatar.jpg)，而不是站点目录。 网站图标编辑主图配置文件，修改favicon1favicon: /favicon.ico 然后将favicon.ico放在hexo/source目录下即可。 以上基本就完成了个人博客的搭建，更多信息可参考： 史上最详细的Hexo博客搭建图文教程 hexo官网 next文档]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring整合redis]]></title>
      <url>%2F2017%2F04%2F21%2Fspring%E6%95%B4%E5%90%88redis%2F</url>
      <content type="text"><![CDATA[概念简介： Redis：一款开源的Key-Value数据库。 Jedis：Redis官方推出的一款面向Java的客户端，提供了很多接口供Java语言调用。 Spring Data Redis：SDR是Spring官方推出，可以算是Spring框架集成Redis操作的一个子框架，封装了Redis的很多命令，可以很方便的使用Spring操作Redis数据库。 这三个究竟有什么区别呢？可以简单的这么理解，Redis是用ANSI C写的一个基于内存的Key-Value数据库，而Jedis是Redis官方推出的面向Java的Client，提供了很多接口和方法，可以让Java操作使用Redis，而Spring Data Redis是对Jedis进行了封装，集成了Jedis的一些命令和方法，可以与Spring整合。在后面的配置文件（spring-redis.xml）中可以看到，Spring是通过Jedis类来初始化connectionFactory的。 spring整合redis maven添加依赖配置 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt; redis.properties 123456789# Redis settingsredis.host=localhostredis.port=6379redis.pass=tennyredis.maxTotal=200redis.maxIdle=50redis.minIdle=300redis.maxWaitMillis=1000redis.testOnBorrow=true spring-redis.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:c=&quot;http://www.springframework.org/schema/c&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;context:property-placeholder location=&quot;classpath:redis.properties&quot; /&gt; &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt; &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot; /&gt; &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot; /&gt; &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot; /&gt; &lt;property name=&quot;maxWaitMillis&quot; value=&quot;$&#123;redis.maxWaitMillis&#125;&quot; /&gt; &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;redis.testOnBorrow&#125;&quot; /&gt; &lt;/bean&gt; &lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot; p:hostName=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot; c:poolConfig-ref=&quot;poolConfig&quot;&gt; &lt;/bean&gt; &lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt; &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt; &lt;/bean&gt; &lt;bean id=&quot;cacheManager&quot; class=&quot;org.springframework.data.redis.cache.RedisCacheManager&quot; c:template-ref=&quot;redisTemplate&quot;&gt; &lt;property name=&quot;usePrefix&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;cacheNames&quot;&gt; &lt;set&gt; &lt;value&gt;t&lt;/value&gt; &lt;value&gt;c&lt;/value&gt; &lt;/set&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; 定义User实体 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import java.io.Serializable;import java.util.Date;public class User implements Serializable &#123; private static final long serialVersionUID = -6683628971480535063L; private Integer id; private String username; private String password; private Integer type; private Date createTime; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username == null ? null : username.trim(); &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password == null ? null : password.trim(); &#125; public Integer getType() &#123; return type; &#125; public void setType(Integer type) &#123; this.type = type; &#125; public Date getCreateTime() &#123; return createTime; &#125; public void setCreateTime(Date createTime) &#123; this.createTime = createTime; &#125;&#125; 测试 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.util.Date;import org.springframework.cache.Cache;import org.springframework.cache.Cache.ValueWrapper;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.data.redis.cache.RedisCacheManager;import com.news.pojo.User;public class TestRedis &#123; @SuppressWarnings(&quot;resource&quot;) public static void main(String[] args) &#123; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-redis.xml&quot;); RedisCacheManager cacheManager = (RedisCacheManager) context.getBean(&quot;cacheManager&quot;); System.out.println(&quot;cacheNames: &quot; + cacheManager.getCacheNames()); Cache cacheT = cacheManager.getCache(&quot;t&quot;); Cache cacheC = cacheManager.getCache(&quot;c&quot;); User user1 = new User(); user1.setId(1); user1.setUsername(&quot;tenny&quot;); user1.setPassword(&quot;admin&quot;); user1.setType(1); user1.setCreateTime(new Date()); User user2 = new User(); user2.setId(2); user2.setUsername(&quot;panda&quot;); user2.setPassword(&quot;xiaobai&quot;); user2.setType(2); user2.setCreateTime(new Date()); System.out.println(&quot;put two user into cacheT...&quot;); cacheT.put(&quot;user1&quot;, user1); cacheT.put(&quot;user2&quot;, user2); System.out.println(&quot;put name and age into cacheC...&quot;); cacheC.put(&quot;name&quot;, &quot;tenny&quot;); cacheC.put(&quot;age&quot;, 25); System.out.println(&quot;get two user from cacheT&quot;); User value1 = cacheT.get(&quot;user1&quot;, User.class); System.out.println(value1.toString()); ValueWrapper value2 = cacheT.get(&quot;user2&quot;); System.out.println(value2.get()); System.out.println(&quot;get two user from cacheC&quot;); ValueWrapper value3 = cacheC.get(&quot;name&quot;); System.out.println(value3.get()); ValueWrapper value4 = cacheC.get(&quot;age&quot;); System.out.println(value4.get()); &#125;&#125; 测试结果 123456789cacheNames: [t, c]put two user into cacheT...put name and age into cacheC...get two user from cacheTcom.news.pojo.User@2ea227afcom.news.pojo.User@4386f16get two field from cacheCtenny25 直接使用redisTemplate 123456789101112131415161718192021@SuppressWarnings(&quot;unchecked&quot;)RedisTemplate&lt;String, User&gt; redisTemplate = (RedisTemplate&lt;String, User&gt;) context.getBean(&quot;redisTemplate&quot;);System.out.println(&quot;put two user into redisTemplate...&quot;);redisTemplate.opsForHash().put(&quot;user&quot;, &quot;user1&quot;, user1);redisTemplate.opsForHash().put(&quot;user&quot;, &quot;user2&quot;, user2);System.out.println(&quot;gut two user from redisTemplate...&quot;);User redisUser1 = (User) redisTemplate.opsForHash().get(&quot;user&quot;, &quot;user1&quot;);System.out.println(redisUser1);User redisUser2 = (User) redisTemplate.opsForHash().get(&quot;user&quot;, &quot;user2&quot;);System.out.println(redisUser2);@SuppressWarnings(&quot;unchecked&quot;)RedisTemplate&lt;String, String&gt; redisTemplate2 = (RedisTemplate&lt;String, String&gt;) context.getBean(&quot;redisTemplate&quot;);System.out.println(&quot;put color list into redisTemplate2...&quot;);redisTemplate2.opsForList().leftPush(&quot;color&quot;, &quot;blue&quot;);redisTemplate2.opsForList().leftPush(&quot;color&quot;, &quot;red&quot;);redisTemplate2.opsForList().rightPush(&quot;color&quot;, &quot;yellow&quot;);System.out.println(&quot;gut color list from redisTemplate2...&quot;);List&lt;String&gt; colorList = redisTemplate2.opsForList().range(&quot;color&quot;, 0, -1);System.out.println(colorList); redisTemplate测试结果 1234567put two user into redisTemplate...gut two user from redisTemplate...com.news.pojo.User@4313f5bccom.news.pojo.User@7f010382put color list into redisTemplate2...gut color list from redisTemplate2...[red, blue, yellow]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[redis设置密码]]></title>
      <url>%2F2017%2F04%2F19%2Fredis%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81%2F</url>
      <content type="text"><![CDATA[设置密码有两种方式。 命令行设置密码。 运行cmd切换到redis根目录，先启动服务端 1&gt;redis-server.exe 另开一个cmd切换到redis根目录，启动客户端 1&gt;redis-cli.exe -h 127.0.0.1 -p 6379 客户端使用config get requirepass命令查看密码 123&gt;config get requirepass1)&quot;requirepass&quot;2)&quot;&quot; //默认空 客户端使用config set requirepass yourpassword命令设置密码 12&gt;config set requirepass 123456&gt;OK 一旦设置密码，必须先验证通过密码，否则所有操作不可用 12&gt;config get requirepass(error)NOAUTH Authentication required 使用auth password验证密码 12345&gt;auth 123456&gt;OK&gt;config get requirepass1)&quot;requirepass&quot;2)&quot;123456&quot; 也可以退出重新登录 1redis-cli.exe -h 127.0.0.1 -p 6379 -a 123456 命令行设置的密码在服务重启后失效，所以一般不使用这种方式。 配置文件设置密码 在redis根目录下找到redis.windows.conf配置文件，搜索requirepass，找到注释密码行，添加密码如下： 12# requirepass foobaredrequirepass tenny //注意，行前不能有空格 重启服务后，客户端重新登录后发现 123&gt;config get requirepass1)&quot;requirepass&quot;2)&quot;&quot; 密码还是空？ 网上查询后的办法：创建redis-server.exe 的快捷方式， 右键快捷方式属性，在目标后面增加redis.windows.conf， 这里就是关键，你虽然修改了.conf文件，但是exe却没有使用这个conf，所以我们需要手动指定一下exe按照修改后的conf运行，就OK了。 所以，这里我再一次重启redis服务(指定配置文件) 1&gt;redis-server.exe redis.windows.conf 客户端再重新登录，OK了。 1234&gt;redis-cli.exe -h 127.0.0.1 -p 6379 -a 123456&gt;config get requirepass1)&quot;requirepass&quot;2)&quot;123456&quot; 疑问: redis目录下有两个配置文件redis.windows.conf和redis.windows-server.conf，看到网上有的人用前者有的人用后者，不清楚到底该用哪一个。看了下两个文件又没啥区别，个人就用前者了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[redis入门]]></title>
      <url>%2F2017%2F04%2F15%2Fredis%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[redis简介Redis 是一个高性能的key-value数据库。 Redis可基于内存亦可持久化。 Redis 支持存储的value类型丰富，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型） Redis性能极高，读的速度可高达110000次/s，写的速度可高达81000次/s 。 Redis的所有操作都是原子性的，Redis还支持几个操作合并后的原子性执行。 Redis 下载安装Redis官方并不支持Windows。 但是，微软针对Win64自己开发了一个windows版的redis并共享到github上。 点击https://github.com/MSOpenTech/redis/releases下载。 选择你喜欢的安装方式，这里我选择压缩版。 安装/解压缩后到redis目录找到redis-server.exe和redis-cli.exe 双击redis-server.exe启动redis服务 双击redis-cli.exe启动客户端，用来访问redis服务。 测试一下，设置x的值为1并获取x。 使用redisredis使用key-value来存储数据。 set &amp; get使用set命令设置值，并用get命令获取值。1234&gt; set name &quot;tenny&quot;OK&gt; get name&quot;tenny&quot; deldel删除一个key1234&gt; del name(integer) 1&gt; get name(nil) incrincr递增一个值，如果key不存在则创造它并初始化值为11234567891011&gt; set connections 10OK&gt; incr connections(integer) 11&gt; incr connections(integer) 12&gt; del connections(integer) 1&gt; incr connections //connections不存在，初始化为1(integer) 1 setnxsetnx(set-if-not-exists)，如果key不存在才改变值。123456789101112131415&gt; set name &quot;panda&quot;OK&gt; get name&quot;panda&quot;&gt; setnx name &quot;tenny&quot; //因为name存在所以不会改变值(integer) 0&gt; get name&quot;panda&quot;&gt; get age(nil)&gt; setnx age 22 //age不存在，赋值为22(integer) 1&gt; get age&quot;22&quot; expire &amp; ttlexpire设置生存时间，ttl查看剩余时间。12345678910111213141516171819202122232425&gt; set name &quot;tenny&quot;OK&gt; expire name 120 //设置name生存时间为120秒(integer) 1&gt; ttl name(integer) 80 //剩余80秒&gt; ttl name //2分钟后(integer) -2 //-2表示name这个key已经不存在了。&gt; get name(nil)&gt; set name &quot;tenny&quot;OK&gt; ttl name(integer) -1 //默认-1表示永久存在&gt; expire name 120(integer) 1&gt; ttl name(integer) 118&gt; get name&quot;tenny&quot;&gt; set name &quot;panda&quot; //设置值会重置存在时间OK&gt; ttl name(integer) -1 list操作：rpush &amp; lpush &amp; llen &amp; lrange &amp; lpop &amp; rpop rpush在list末尾添加元素 1234&gt; rpush color &quot;blue&quot; //[bule](integer) 1&gt; rpush color &quot;red&quot; //[bule, red](integer) 2 lpush在list开头添加元素 12&gt; lpush color &quot;yellow&quot; //[yellow, bule, red](integer) 3 llen查看list长度 12&gt; llen color(integer) 3 lrange查看list内容，接受两个参数，开始index和结尾index，如果结尾index为-1，表示直到list末尾。 12345678910111213&gt; lrange color 0 21) &quot;yellow&quot;2) &quot;blue&quot;3) &quot;red&quot;&gt; lrange color 0 11) &quot;yellow&quot;2) &quot;blue&quot;&gt; lrange color 1 21) &quot;blue&quot;2) &quot;red&quot;&gt; lrange color 1 21) &quot;blue&quot;2) &quot;red&quot; lpop移除list第一个元素并返回它 1234567&gt; lpop color&quot;yellow&quot;&gt; llen color(integer) 2&gt; lrange color 0 -11) &quot;blue&quot;2) &quot;red&quot; rpop移除list最后一个元素并返回它 123456&gt; rpop color&quot;red&quot;&gt; llen color(integer) 1&gt; lrange color 0 -11) &quot;blue&quot; set操作：sadd &amp; srem &amp; sismember &amp; smembers &amp; sunionset类似list，但是元素没有顺序且只能出现一次。 sadd添加一个元素到set 12345678&gt; sadd superpowers &quot;flight&quot; //[&quot;flight&quot;](integer) 1&gt; sadd superpowers &quot;x-ray vision&quot; //[&quot;flight&quot;, &quot;x-ray vision&quot;](integer) 1&gt; sadd superpowers &quot;reflexes&quot; //[&quot;flight&quot;, &quot;x-ray vision&quot;, &quot;reflexes&quot;](integer) 1&gt; SADD superpowers &quot;flight&quot; //重复添加无效(integer) 0 srem从set中移除一个元素 12&gt; srem superpowers &quot;reflexes&quot; //[&quot;flight&quot;, &quot;x-ray vision&quot;]1 sismember测试一个元素是否存在于set，存在返回1，不存在返回0 1234&gt; sismember superpowers &quot;flight&quot;(integer) 1&gt; sismember superpowers &quot;reflexes&quot;(integer) 0 smembers查看set所有元素 123&gt; sismember superpowers1) &quot;x-ray vision&quot;2) &quot;flight&quot; sunion联合多个set并返回它们的合集 1234567891011121314&gt; sadd birdpowers &quot;pecking&quot;(integer) 1&gt; sadd birdpowers &quot;flight&quot;(integer) 1&gt; smembers birdpowers1) &quot;pecking&quot;2) &quot;flight&quot;&gt; smembers superpowers1) &quot;x-ray vision&quot;2) &quot;flight&quot;&gt; sunion superpowers birdpowers //无序的 sunion birdpowers superpowers结果一样1) &quot;pecking&quot;2) &quot;flight&quot;3) &quot;x-ray vision&quot; sorted set操作：zadd zrange有序集合(sorted set)类似集合，不过它每个元素有一个关联值，通过这个关联值对元素进行排序。 zadd为一个有序集合添加元素 12345678910111213141516&gt; zadd hackers 1940 &quot;Alan Kay&quot;(integer) 1&gt; zadd hackers 1906 &quot;Grace Hopper&quot;(integer) 1&gt; zadd hackers 1953 &quot;Richard Stallman&quot;(integer) 1&gt; zadd hackers 1965 &quot;Yukihiro Matsumoto&quot;(integer) 1&gt; zadd hackers 1916 &quot;Claude Shannon&quot;(integer) 1&gt; zadd hackers 1969 &quot;Linus Torvalds&quot;(integer) 1&gt; zadd hackers 1957 &quot;Sophie Wilson&quot;(integer) 1&gt; zadd hackers 1912 &quot;Alan Turing&quot;(integer) 1 zrange类似于lrange，查看sorted set元素。接受两个参数，开始index和结尾index，如果结尾index为-1，表示直到末尾 123456789&gt; zrange hackers 0 -11) &quot;Grace Hopper&quot;2) &quot;Alan Turing&quot;3) &quot;Claude Shannon&quot;4) &quot;Alan Kay&quot;5) &quot;Richard Stallman&quot;6) &quot;Sophie Wilson&quot;7) &quot;Yukihiro Matsumoto&quot;8) &quot;Linus Torvalds&quot; 可以看到元素以年份递增排序。1234&gt; ZRANGE hackers 2 41) &quot;Claude Shannon&quot;2) &quot;Alan Kay&quot;3) &quot;Richard Stallman&quot; hash操作：hset &amp; hget &amp; hgetall &amp; hmset &amp; hincrby &amp; hdel hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。 hset添加值123456&gt; hset user name &quot;tenny&quot;(integer) 1&gt; hset user email &quot;tenny@example.com&quot;(integer) 1&gt; hset user password &quot;cutepanda&quot;(integer) 1 hget获取值 12&gt; hget user name&quot;tenny&quot; hgetall获取所有值 1234567&gt; hgetall user1) &quot;name&quot;2) &quot;tenny&quot;3) &quot;email&quot;4) &quot;tenny@example.com&quot;5) &quot;password&quot;6) &quot;cutepanda&quot; hmset一次性设置多个值 123456789&gt; hmset user1 name &quot;tenny1&quot; password &quot;cutepanda1&quot; email &quot;tenny1@example.com&quot;OK&gt; hgetall user11) &quot;name&quot;2) &quot;tenny1&quot;3) &quot;password&quot;4) &quot;cutepanda1&quot;5) &quot;email&quot;6) &quot;tenny1@example.com&quot; 可以使用hset继续添加或修改12345678910111213141516171819202122&gt; hset user1 age 22(integer) 1&gt; hgetall user11) &quot;name&quot;2) &quot;tenny1&quot;3) &quot;password&quot;4) &quot;cutepanda1&quot;5) &quot;email&quot;6) &quot;tenny1@example.com&quot;7) &quot;age&quot;8) &quot;22&quot;&gt; hset user1 age 24 //已存在的值重复设定返回0，新值返回1(integer) 0&gt; hgetall user11) &quot;name&quot;2) &quot;tenny1&quot;3) &quot;password&quot;4) &quot;cutepanda1&quot;5) &quot;email&quot;6) &quot;tenny1@example.com&quot;7) &quot;age&quot;8) &quot;24&quot; hincrby增加数值型域的值 123456&gt; hset user visits 10(integer) 1&gt; hincrby user visits 1(integer) 11&gt; hincrby user visits 1(integer) 12 hdel删除指定的域 12345678&gt; hdel user visits(integer) 1&gt; hdel user age //删除不存在的域返回0(integer) 0&gt; hdel user visits(integer) 0&gt; hincrby user visits 20 //字段不存在则默认设置为0后再执行此增加操作(integer) 20 以上介绍了redis的一些简单命令，可以访问redis中文官方网站了解更多。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World!]]></title>
      <url>%2F2017%2F04%2F08%2FHelloWorld%2F</url>
      <content type="text"><![CDATA[开始动手，Hello World！！是时候编写你自己的第一个Java应用了。 下载JDK你可以到这里下载JDK并安装。 注意：下载的是JDK，而不是JRE。JRE是java运行环境，用于运行java程序；JDK是java开发工具包，用于开发java程序，其中包含了JRE，所以我们下载JDK就好。 安装完成后，win + r 输入cmd，打开命令行窗口，输入”java -version”，看到类似如下结果就说明安装成功了。1234C:\Users\Administrator&gt;java -versionjava version &quot;1.8.0_102&quot;Java(TM) SE Runtime Environment (build 1.8.0_102-b14)Java HotSpot(TM) 64-Bit Server VM (build 25.102-b14, mixed mode) 编辑工具这里用windows自带的记事本就可以。 创建源文件在D盘新建一个目录myapplication(你也可以自己选择其他盘符及目录)，新建一个记事本文档，将下面代码粘贴或手动输入到文本里：123456789/** * The HelloWorldApp class implements an application that * simply prints &quot;Hello World!&quot; to standard output. */class HelloWorldApp &#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello World!&quot;); // Display the string. &#125;&#125; 注意：Java严格区分大小写，HelloWorldApp不等于helloWorldapp。 将该文件保存为HelloWorldApp.java。 编译win + r，输入cmd，打开命令行窗口，输入1cd d:\myapplication 切换到HelloWorldApp.java文件所在目录。 切换目录使用如下命令：12345C:\&gt;D: //切换到D盘根目录D:\&gt;cd myapplication //切换到当前目录下的myapplication目录D:\myapplication&gt; //完成切换。。 继续输入:1javac HelloWorldApp.java 如果没有任何信息，应该就编译成功了，查看myapplication目录，发现多出一个HelloWorldApp.class文件，这个就是字节码文件。如果出现错误提示，请检查文件名和文件内容是否和上述一致。 运行输入java HelloWorldApp运行程序。12D:\myapplication&gt;java HelloWorldAppHello World! 看到打印出了”Hello World!”说明我们得程序运行成功了。如果提示错误，请检查文件名和文件内容是否和上述一致。 至此，第一个java应用程序就完成了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java是什么]]></title>
      <url>%2F2017%2F04%2F08%2FJava%E6%98%AF%E4%BB%80%E4%B9%88%2F</url>
      <content type="text"><![CDATA[Java 技术Java技术既是一门编程语言，也是一个平台。 Java编程语言Java作为一门高级编程语言，具有如下特性： 简单 跨平台 面向对象 便携性 分布式 高性能 多线程 健壮的 动态的 安全的 在Java程序中，所有的源文件是以”.java”结尾的普通文本文件，java编译器将源文件编译成”.class”文件。”.class”文件包含的并不是类似”0101011”的机器语言代码，而是称之为字节码(bytecodes)的东东，而这个字节码其实是java虚拟机的机器语言。通过java虚拟机，再将字节码转换为本地机器可识别的代码。 编译图如下： 因为java虚拟机可运行在不同的平台，所以我们的.class文件也可以运行在微软，Linux,苹果等不同平台。虚拟机的存在使得java实现了跨平台，也就是经常说的”一次编译，到处运行”。 Java平台平台是供程序运行的硬件或软件环境。我们常说的微软操作系统，Linux系统，苹果操作系统这些都属于平台。大部分的平台是操作系统和基础硬件的合集。而Java平台与大多数平台不同，它是一个纯的软件平台，运行于其他的基于硬件的平台上(例如Windows)。 Java平台包含两部分： Java虚拟机 Java应用程序接口(API) 上面已经提到过java虚拟机，它是java平台的基础，与不同的操作系统对接。 API是内置的许多有用的方法的集合。它将相关的类(class)和接口(interface)组合成库，这个库我们通常称之为包(package)。 作为一个平台独立的环境，Java平台的速度比传统编译(c++直接编译成机器指令，java编译后是字节码文件，还需要虚拟机翻译成机器指令)慢，。但是随着硬件的发展，java编译器和虚拟机的性能已大幅提升，其速度和传统编译已相差无几。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Nginx加权轮询算法]]></title>
      <url>%2F2017%2F04%2F06%2FNginx%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95%2F</url>
      <content type="text"><![CDATA[记录一下nginx加权分配算法。 nginx可以指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。例如：12345upstream backend &#123; server a weight=6; server b weight=3; server c weight=1;&#125; 按照配置，每有10次请求，其中6个会转发到a服务器，3个转发到b服务器，1个转发到c服务器。 每个服务器都有三个权重变量，先解释下它们的含义。 (1) weight 配置文件中指定的该服务器的权重，这个值是固定不变的。 (2) effective_weight 服务器的有效权重，初始值为weight。 在释放服务器时，如果发现和某服务器的通信过程中发生了错误，就减小它的effective_weight。此后有新的请求过来时，在选取该服务器的过程中，再逐步增加effective_weight，最终又恢复到weight。之所以增加这个字段，是为了当服务器发生错误时，降低其权重。 (3) current_weight 服务器目前的权重，初始为0，之后会动态调整。 那么如何动态调整呢？ nginx每次选取服务器时： 先遍历集群中所有服务器，将每个服务器的current_weight增加它的effective_weight， 再累加所有服务器的effective_weight，保存为total。 判断当前服务器的current_weight是否最大，是则选中该服务器，然后把它的current_weight减去total。不是则不会被选中，current_weight也就不用减了。 弄清了三个weight字段的含义后，加权轮询算法可描述为： 对于每个请求，遍历集群中的所有可用服务器，对于每个服务器执行： current_weight += effecitve_weight。 累加所有effective_weight，保存为total。 选出current_weight最大的服务器，作为本次选定的服务器。 对于本次选定的服务器，执行：current_weight -= total。 下面以表格形式记录其过程： 请求次数 开始current_weight 增加effective_weight 累加total 选中服务器 选中后current_weight 1 [0, 0, 0] [6, 3, 1] 10 a [-4, 3, 1] 2 [-4, 3, 1] [2, 6, 2] 10 b [2, -4, 2] 3 [2, -4, 2] [8, -1, 3] 10 a [-2, -1, 3] 4 [-2, -1, 3] [4, 2, 4] 10 a [-6, 2, 4] 5 [-6, 2, 4] [0, 5, 5] 10 b [0, -5, 5] 6 [0, -5, 5] [6, -2, 6] 10 a [-4, -2, 6] 7 [-4, -2, 6] [2, 1, 7] 10 c [2, 1, -3] 8 [2, 1, -3] [8, 4, -2] 10 a [-2, 4, -2] 9 [-2, 4, -2] [4, 7, -1] 10 b [4, -3, -1] 10 [4, -3, -1] [10, 0, 0] 10 a [0, 0, 0] 可以看到，选中服务器依次为[a, b, a, a, b, a, c, a, b, a]。 a,b,c分别被选中了6,3,1次，正好是符合其权重值的；服务器a虽然权重大，但没有被连续选取，不会对a服务器连续请求；经过10次请求后，a,b,c的当前权重current_weight又全部归0，如此便可循环往复。 ps: 这里我们发现total永远都是10，因为这里假定服务器都没有发生故障或返回错误，其effective_weight不变。实际中如果服务器发生了错误，nginx当然也会进行降权处理，total也会变啦。这里我们学习一下正常算法，出错的情况就先不展开了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo-next主题添加打赏功能]]></title>
      <url>%2F2017%2F04%2F05%2Fhexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD%2F</url>
      <content type="text"><![CDATA[next主题集成了打赏功能，使用起来比较简单。 首先获取微信收款二维码和支付宝收款二维码： 微信：点击右上角的加号”+”，点击”收付款”，点击”我要收款”，就可以看到自己的收款二维码了。还可以点击”设置金额”，之后保存图片(名字可修改为wechatpay.png)。 支付宝： 同理，点击右上角的加号”+”，点击”收钱”,出现二维码，也可以设置金额，之后保存图片(名字可修改为ailpay.jpg)。 我们可以在source目录下建立一个images文件夹，将上面保存的图片放入。 微信和支付宝生成的二维码都有外框，不喜欢外框的话可以利用美图秀秀等软件进行剪裁。选定宽度和高度并勾选锁定剪裁尺寸，一般都是剪裁一个正方形，将剪裁框拖到合适地方，点击”剪裁按钮”，再Ctrl + s 保存即可（支付宝图片同理）。 找到主题next下的配置文件_config.yml，添加信息如下：1234# rewardreward_comment: 如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！wechatpay: /images/wechatpay.pngalipay: /images/alipay.jpg hexo发布，文章下面就会出现一个赏字，点开效果如下： 以上就成功添加了打赏功能(虽然基本不会有人打赏。。。)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多台电脑hexo部署到github的坑]]></title>
      <url>%2F2017%2F04%2F05%2F%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91hexo%E9%83%A8%E7%BD%B2%E5%88%B0github%E7%9A%84%E5%9D%91%2F</url>
      <content type="text"><![CDATA[之前在家里搭建了博客，成功部署到github上，并将hexo目录也上传至github/hexo仓库保存。后来到公司想把它们down下来，方便两边修改同步。 第一个坑是hexo发布博客到github同样进行了一系列的node安装，hexo安装等，并且在hexo博客目录下down下了guthub/hexo的资源，本地启动，没问题。但是当我发布想发布到yourname.github.io上时，问题来了，它居然把我的整个hexo博客目录扔到了yourname.github.io上，不是说好的只发布.deploy_git下的内容呢！！ 于是我就茫然了啊，我去查看hexo下的_config.yml文件，1234deploy: type: git repo: git@github.com:tenny-peng/tenny-peng.github.io.git branch: master 没错啊，是这个地址啊。 后来一想也不对，就算这里错了也不对，不是目标地址错了，而是发布的内容错了。 网上查到了这篇博客: hexo部署到github遇到的坑，最后说删除hexo目录下的.git文件，然后我就试了试，重新发布，然后又报错了。。这里想截图可是命令行找不到了，大概就是说没有指定repository，然后我点开.deploy_git文件夹，突然想到在家里.deploy_git文件夹下面是有.git的，而且还是我自己指定的。 哈哈，瞬间好像知道了，打开git bash，切换到hexo/.deploy_git，执行1git init 再绑定远程仓库1git remote add origin git@github.com:tenny-peng/tenny-peng.github.io.git 回到cmd命令行1hexo d 搞定了，成功提交了正确的博客内容。 第二个坑是hexo目录与github/hexo同步然后再把我的hexo目录和github/hexo同步，刚才把hexo目录下的.git删了。好吧，重新建回来。git bash切换到hexo根目录123git initgit remote add origin git@github.com:tenny-peng/hexo.git 执行pull指令123456789101112$ git pull origin masterFrom github.com:tenny-peng/hexo * branch master -&gt; FETCH_HEADerror: The following untracked working tree files would be overwritten by merge: .npmignore _config.yml db.json node_modules/.bin/JSONStream node_modules/.bin/JSONStream.cmd node_modules/.bin/acorn node_modules/.bin/acorn.cmd ... 这里说一下，第一个坑中hexo目录下的内容是我直接从github/hexo上down下来复制过来的，然后本地又进行过hexo生成和发布操作，错误具体原因不太清除(知道的童鞋欢迎指正)，网上查到解决办法是先清理1234567891011$ git clean -f -dSkipping repository .deploy_git/Removing .npmignoreRemoving _config.ymlRemoving db.jsonRemoving node_modules/Removing package.jsonRemoving public/Removing scaffolds/Removing source/Removing themes/ 清理后hexo目录下只剩.deploy_git和.git目录，再拉取就可以了1234$ git pull origin masterFrom github.com:tenny-peng/hexo * branch master -&gt; FETCH_HEADChecking out files: 100% (7651/7651), done. 所以下次可以先同步好hexo文件夹，这样第二个坑应该就不会出现了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[修复TortoiseGit图标不显示]]></title>
      <url>%2F2017%2F04%2F04%2F%E4%BF%AE%E5%A4%8DTortoiseGit%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA%2F</url>
      <content type="text"><![CDATA[win + r 打开运行，输入regedit.exe打开注册表 找到HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer 修改符串值 “Max Cached Icons” (如没有则新建)值为 “10000”(切换到十进制)。 Ctrl + Alt + Del 打开任务管理器,找到explorer.explorer 右键选中explorer.exe，在弹出选项中选择”结束进程”,这个时候会发现电脑底部状态栏没有了，不用担心。 任务管理器上方的”文件”选项，点击”新建任务(运行)”，输入explorer.exe，确定即可。 由于Windows Explorer Shell 支持的 Overlay Icon 最多 15 个，Windows 自身使用了 4 个，只剩 11 个可扩展使用。我们在这里调节了它的最大图标数。explorer.exe是Windows程序管理器或者文件资源管理器，它用于管理Windows图形壳，包括桌面和文件管理，重启explorer.exe就可以看到我们的修改了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MarkDown设置字体颜色]]></title>
      <url>%2F2017%2F04%2F03%2FMarkDown%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%2F</url>
      <content type="text"><![CDATA[记录一下如何设置字体颜色和大小12&lt;font color=red size=5&gt;gray&lt;/font&gt;&lt;font color=&quot;#4590a3&quot; size=&quot;6px&quot;&gt;文字&lt;/font&gt; 效果如下： red文字]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo引用本地图片]]></title>
      <url>%2F2017%2F04%2F03%2FMarkDown%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%2F</url>
      <content type="text"><![CDATA[markdown文章里引用图片有两种方式。一种是直接引用互联网上的图片，使用绝对路径 http://xxx.com/xxx.jpg 一种是使用本地图片。 因为最后要发布到网上，所以引用本地图片路径必须是相对路径xxx/xxx.png 这里讲如何引用本地图片。首先在站点_config.yml 中找到”post_asset_folder”属性，将其设置为”true”。Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder。当设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。 启动cmd,切换到hexo的目录下执行1npm install https://github.com/CodeFalling/hexo-asset-image --save 等待一段时即可。 安装完成后用hexo新建文章的时候_posts目录下面会多出一个和文章同名的文件夹。图片就可以放在该文件夹下面使用。 把你要引用的图片放在同名目录下,如下引用即可。 1![xxx](testpic/xxxxxx.png) 个人感觉也可以不装这个插件，自己手动建立同名文件夹也可以的。但是装了还是方便，毕竟hexo新建文章能初始化一些信息。 再说下本人踩过的坑。在source目录下建立images文件夹存放图片，然后通过../images/xxx.png引用，感觉是没什么问题的，实际在本地也没问题。但是上传到github就不对了。github上去找寻的路径类似https://tenny-peng.github.io/2017/04/04/images/xxx.png。很明显这是找不到的，因为发布后2017/04/04下只有文章，没有其他文件或文件夹。也试过在_posts下建立images,通过images/xxx.png引用，结果是一样的。 然后建立了同名文件夹，到github上查看发布后的文件才发现，对于每个md文件，生成一个同名的文件夹，里面有一个index.html文件是md文件转化的内容，我们当初自建的同名文件夹下的图片也在该文件夹下，例如，在github上，对于testpic.md,生成一个testpic文件夹，里面有一个index.html,其内容就是我们得testpic.md里编写的内容，而我们当时正好建立了同名的文件夹来存放图片，此时，这些图片也到了github下的同名文件夹。如此一来，引用就没有问题了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git简单教程]]></title>
      <url>%2F2017%2F04%2F03%2FGit%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[简介Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目, 可以有效、高速的处理从很小到非常大的项目版本管理。 安装由于本人是Windows平台，所以这里安装的是Windows平台下的工具。 点击https://git-scm.com/download/win下载 如果网速太慢可以百度搜索“git下载”。 下载完成之后一路next就可以了， 安装完成后，开始菜单找到”git”-&gt;”Git Bash”， 在命令行输入1git --version 看到类似如下结果，说明我们安装成功了。 安装完成后，还需要一点设置，在打开的git bash命令行中输入12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 注意把上面改成自己的名字和邮箱地址 git config命令的–global参数，表示你这台机器上所有的Git仓库都会使用这个配置， 当然也可以对某个仓库指定不同的用户名和Email地址。 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。 使用github我们希望项目不只是在本地，只有有网，哪里都可以获取自己的项目，GitHub 正是这样一个面向开源及私有软件项目的托管平台。我们可以把自己的项目放在这个平台上，可以和其他人维护项目。 后面会讲git的基本操作，你也可以直接到后面查看。作为一般流程，这里让我们先注册一个github账号 进入github网站,点击sign up 填写信息后点击”create an account” 按钮 之后进入到我们的首页 这样我们已经成功拥有了一个github账号，让我们正式开始吧~ 简单说下仓库的概念，仓库的英文名是repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。 点击上面的+号，新建一个仓库 输入我们的仓库名称后，点击下面”create repository”按钮即可创建一个仓库 我们可以看到这个仓库是空的，什么都没有。 接下来，我们回到本地git上。 克隆仓库由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以还需要一点设置： 回到git bash命令窗口，创建SSH key:1$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 登录你的github，进入setting，点击”SSH and GPG keys”,点击右上角”New SSH Key”,tite随便填，Key文本框里粘贴id_rsa.pub文件的内容，最后点击”Add SSh Key”即可。 可以看到我这里已经有两个了，一个家里一个公司，这样就可以两边同步信息了。 为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。 接下来输入1cd e: 切换目录，执行1git clone git@github.com:tenny-peng/test.git 稍等一会，就可将github上的项目克隆到本地 这里我选的e盘根目录，你可以自己修改，注意：选择的目录下不可以有仓库同名目录如我的e盘下不能有test这个目录，不然在克隆时会报错。 这里有一个警告，说我们的仓库是空的，不用管它，我们马上会添加文件。 添加文件使用Windows的童鞋要特别注意： 千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把notepad++的默认编码设置为UTF-8without BOM即可。 在仓库test文件目录下，我们先编写一个readme.txt文件，内容如下：12Git is a version control system.Git is free software. 这里我们可以看到test目录下有一个隐藏的.git目录(看不到可自行百度“windows查看隐藏文件方法”)，这个就说明此目录是由git管理的仓库了，如果删除了这个隐藏的目录，那个git也就不认识这个目录了，也不能对此目录下的文件进行管理了。 回到命令行，输入1git add readme.txt 什么反馈信息也没有？那就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。 使用1git status 可查看当前仓库状态 我们发现提示有新文件，但是这样还不够。 我们继续输入1git commit -m &quot;add readme.txt&quot; 这样才把文件提交到仓库，再次输入”git status”查看状态 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。 推送这里我就在仓库里新增了一个文件，当然还会有修改，删除操作。其实这样就可以管理自己的项目了。但是，我们似乎忘记了github。对，我们需要的是随时随处可获取，所以我们需要把本地仓库的内容同步到github这个托管平台。 当你从远程仓库克隆时，实际上Git自动把本地的master分支(分支后面再讲，简单理解为仓库的多个版本，默认一个主分支)和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。 要查看远程库的信息，输入1git remote 或1git remote -v 获取更详细信息 上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。 接下来我们把本地改动(这里新增了一个文件，对于git，新增，修改，删除，都属于改动)推送到远程仓库。1git push origin master 刷新浏览器中我们的github主页，可以看到，readme.txt文件已经同步到远程仓库了。 以上我们就使用git创建了自己的仓库，并将其同步到远程服务器上，以便我们在其它地方，或其他人获取。 参考： 廖雪峰的git教程 git互动百科 github互动百科]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown基础语法]]></title>
      <url>%2F2017%2F04%2F03%2FMarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[标准mrakdown语法加粗和斜体字体加粗以两个*或两个_开头结尾1__重要的事情说三遍！！！__ **重要的事情说三遍！！！** 效果如下： 重要的事情说三遍！！！ 字体倾斜以一个*或_开头结尾1_一段斜体文字_ *一段斜体文字* 效果如下： 一段斜体文字 链接和邮件链接：12bla bla bla [example](http://url.com/ &quot;Title&quot;)这是我们常用的网站: [百度一下](www.baidu.com &quot;百度一下&quot;) 效果如下： 这是我们常用的网站: baidu 也可以定义一个id来对应链接地址12345bla bla bla [example][id]. Then, anywhere else in the doc, define the link:[id]: http://example.com/ &quot;Title&quot;这是我们常用的网站: [baidu][baiduId][baiduId]: www.baidu.com &quot;百度一下&quot; 效果如下： 这是我的博客，欢迎访问。 邮件：12An email &lt;example@example.com&gt; link.这是我的邮箱&lt;mpengtaoqi@163.com&gt;。 效果如下： 这是我的邮箱&#109;&#x70;&#101;&#110;&#x67;&#x74;&#x61;&#111;&#113;&#105;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;。 图片行内引用 (标题可选):12![alt text](/path/img.jpg &quot;Title&quot;)这里出现一个引用的图片![图片替代文字](https://tenny-peng.github.io/images/avatar.jpg &quot;偷得浮生半日闲&quot;) 效果如下： 这里出现一个引用的图片 使用id引用图片链接：12345![alt text][id][id]: /url/to/img.jpg &quot;Title&quot;使用id引用图片链接![图片替代文字][img_id][img_id](https://tenny-peng.github.io/images/avatar.jpg &quot;偷得浮生半日闲&quot;) 效果如下： 使用id引用图片链接 标题底线形式:12345标题 1========标题 2-------- 效果如下： 标题 1标题 2#模式 (末尾的#可选):12345# 标题 1 ### 标题 2 ######## 标题 6 效果如下： 标题 1标题 2标题 6列表有序的, 不带段落:1231. Git2. Hexo3. MarkDown 效果如下： Git Hexo MarkDown 无序的, 带段落:12345* 一个条目. 巴拉巴拉拉，这里是段落文字.* 其他条目 效果如下： 一个条目. 巴拉巴拉巴拉，这里是段落文字. 其他条目 你可以嵌套使用它们：12345678* Work * java* Blog 1. github 2. atom * markdown 3. hexo* learn 效果如下： Work java Blog github atom markdown hexo learn 区块引用123456789&gt; 类似邮件的引用方式&gt; 在断好的行前加上`&gt;`&gt; &gt; 也可以嵌套使用&gt; #### 引用标题&gt;&gt; * 也可以是一个列表&gt; * 等等 效果如下： 类似邮件的引用方式在断好的行前加上&gt; 也可以嵌套使用 引用标题 也可以是一个列表 等等 内联代码12345`&lt;some code&gt;` 使用引号和反引号标记行内代码片段。如果要在代码区段内插入反引号，可以用多个反引号来开启和结束代码区段。例如 `` `this` ``. 效果如下： &lt;some code&gt; 使用引号和反引号标记行内代码片段。 如果要在代码区段内插入反引号，可以用多个反引号来开启和结束代码区段。 例如 `this` . 代码块在句段的行首插入1个tab 或 4个空格，则表示代码块。123这是一段普通的文字。 这一段代码块。 分隔线用三个以上的星号或减号或底线来建立一个水平分隔线。 行内不能有其他东西，但你可以在星号或是减号中间插入空格。12345---* * *- - - - 效果如下： 换行在一行的结尾处加上2个或2个以上的空格12Roses are red, Violets are blue. 效果如下： Roses are red,Violets are blue. 表格123456| 字段 | 左对齐 | 居中 | 右对齐 | //表头|------|:------|:----:|------:| //对齐方式(默认左对齐)| 1 | left1 | center1 | right1 | //内容| 2 | left2 | center2 | right2 || 3 | left3 | center3 | right3 || 4 | left4 | center4 | right4 | 效果如下： 默认字段 左对齐字段 居中字段 右对齐字段 1 left1 center1 right1 2 left2 center2 right2 3 left3 center3 right3 4 left4 center4 right4]]></content>
    </entry>

    
  
  
</search>
